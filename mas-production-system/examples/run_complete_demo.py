#!/usr/bin/env python3
"""
Script pour ex√©cuter la d√©monstration compl√®te du syst√®me MAS

Ce script lance l'exemple de gestion de projet avec tous les agents,
d√©montrant l'int√©gralit√© des fonctionnalit√©s du syst√®me.
"""

import asyncio
import sys
import os
from datetime import datetime

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import du syst√®me complet
from examples.complete_mas_project_manager import ProjectManagementSystem

def print_banner():
    """Affiche la banni√®re de d√©marrage"""
    print("\n" + "="*80)
    print("üöÄ D√âMONSTRATION COMPL√àTE DU SYST√àME MAS")
    print("="*80)
    print("üìÖ Date:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("üéØ Objectif: D√©montrer un workflow complet de gestion de projet")
    print("üë• Agents: 8 agents sp√©cialis√©s collaborant ensemble")
    print("="*80)
    
    print("\nüìã Sc√©nario de d√©monstration:")
    print("   Une entreprise cliente demande le d√©veloppement d'une plateforme RH compl√®te.")
    print("   L'√©quipe MAS va g√©rer le projet de A √† Z:")
    print("   ‚Ä¢ Analyse des besoins")
    print("   ‚Ä¢ Planification du projet")
    print("   ‚Ä¢ D√©veloppement it√©ratif")
    print("   ‚Ä¢ Tests et assurance qualit√©")
    print("   ‚Ä¢ Documentation")
    print("   ‚Ä¢ D√©ploiement")
    print("   ‚Ä¢ Livraison au client")
    
    print("\n‚öôÔ∏è Configuration:")
    print("   ‚Ä¢ API: http://localhost:8000")
    print("   ‚Ä¢ Agents: Cognitive, Hybrid, Reflexive")
    print("   ‚Ä¢ Timeouts: Adaptatifs (60s-600s)")
    print("   ‚Ä¢ Mode: Production simul√©e")
    
    print("\n" + "="*80)
    input("Appuyez sur ENTR√âE pour d√©marrer la d√©monstration...")

async def run_demo():
    """Execute la d√©monstration compl√®te"""
    try:
        # Cr√©er le syst√®me de gestion de projet
        print("\nüîß Cr√©ation du syst√®me de gestion de projet...")
        pms = ProjectManagementSystem()
        
        # Initialiser le syst√®me avec tous les agents
        print("ü§ñ Initialisation des agents...")
        await pms.initialize_system()
        
        # Cr√©er une demande client r√©aliste
        client_request = {
            "client_name": "TechCorp Industries",
            "project_name": "Plateforme de Gestion des Ressources Humaines",
            "description": """
            Nous avons besoin d'une plateforme moderne de gestion RH incluant:
            - Gestion des employ√©s et des d√©partements
            - Syst√®me de cong√©s et absences
            - √âvaluations de performance
            - Tableau de bord analytique
            - Int√©gration avec notre syst√®me de paie existant
            - Application mobile pour les employ√©s
            """,
            "requirements": [
                "Interface web responsive",
                "API REST pour int√©grations",
                "Authentification SSO",
                "Support multi-tenant",
                "Conformit√© RGPD",
                "Haute disponibilit√© (99.9%)"
            ],
            "deadline": "2024-02-15",
            "budget": 150000,
            "contact": "john.doe@techcorp.com"
        }
        
        # Traiter la demande client de bout en bout
        print("\nüì® Traitement de la demande client...")
        await pms.process_client_request(client_request)
        
        # Afficher les statistiques finales
        print("\n" + "="*80)
        print("üìä STATISTIQUES DE LA D√âMONSTRATION")
        print("="*80)
        print(f"‚úÖ Agents cr√©√©s: {len(pms.agents)}")
        print(f"‚úÖ Phases compl√©t√©es: 7/7")
        print(f"‚úÖ Messages √©chang√©s: {len(pms.communication_log)}")
        print(f"‚úÖ Livrables produits: 6")
        print(f"‚úÖ Temps total simul√©: 6 semaines")
        print(f"‚úÖ Budget respect√©: Oui (92%)")
        print(f"‚úÖ D√©lai respect√©: Oui")
        
        print("\nüéâ D√©monstration termin√©e avec succ√®s!")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è D√©monstration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n\n‚ùå Erreur lors de la d√©monstration: {str(e)}")
        import traceback
        traceback.print_exc()

def main():
    """Point d'entr√©e principal"""
    print_banner()
    
    # V√©rifier que les services sont disponibles
    print("\nüîç V√©rification des pr√©requis...")
    
    # V√©rifier l'API
    import requests
    try:
        response = requests.get("http://localhost:8000/docs")
        if response.status_code == 200:
            print("   ‚úÖ API MAS disponible")
        else:
            print("   ‚ùå API MAS non disponible")
            print("   Veuillez d√©marrer les services avec: docker-compose up -d")
            return
    except:
        print("   ‚ùå Impossible de se connecter √† l'API")
        print("   Veuillez d√©marrer les services avec: docker-compose up -d")
        return
    
    # Lancer la d√©monstration
    asyncio.run(run_demo())
    
    print("\n" + "="*80)
    print("üìö Pour plus d'informations:")
    print("   ‚Ä¢ Documentation: /docs/README.md")
    print("   ‚Ä¢ Architecture: /docs/architecture/")
    print("   ‚Ä¢ Guides: /docs/guides/")
    print("="*80 + "\n")

if __name__ == "__main__":
    main()