#!/usr/bin/env python3
"""
Agent qui g√©n√®re du code et le sauvegarde dans l'espace de travail
"""

import sys
import os
sys.path.append('/app')

import asyncio
import json
from uuid import uuid4
from datetime import datetime

from src.core.agents import AgentFactory, get_agent_runtime
from src.services.llm_service import LLMService
from src.services.tool_service import ToolService
from src.utils.logger import get_logger

logger = get_logger(__name__)

class CodeGeneratorAgent:
    """Agent sp√©cialis√© dans la g√©n√©ration de code"""
    
    def __init__(self):
        self.agent_id = str(uuid4())
        self.name = f"CodeGen-{self.agent_id[:8]}"
        self.llm_service = LLMService()
        self.tool_service = ToolService()
        self.workspace_path = f"/app/agent_workspace/projects/{self.agent_id}"
        
    async def generate_code(self, request: str, project_name: str = "generated_project"):
        """G√©n√®re du code bas√© sur une requ√™te"""
        logger.info(f"Agent {self.name} - G√©n√©ration de code pour: {request}")
        
        try:
            # 1. Cr√©er l'espace de travail du projet
            filesystem_tool = self.tool_service.get_tool("filesystem")
            if not filesystem_tool:
                raise Exception("FileSystemTool non disponible")
            
            # Cr√©er le r√©pertoire du projet
            result = await filesystem_tool.execute(
                action="create_directory",
                agent_id=self.agent_id,
                project_name=project_name
            )
            
            if not result.success:
                raise Exception(f"Erreur cr√©ation r√©pertoire: {result.error}")
            
            project_path = result.data["project_path"]
            logger.info(f"Projet cr√©√© dans: {project_path}")
            
            # 2. Analyser la requ√™te avec le LLM
            analysis_prompt = f"""Analyser cette requ√™te de g√©n√©ration de code:
            
Requ√™te: {request}

D√©terminer:
1. Le langage de programmation appropri√©
2. Les fichiers √† cr√©er
3. La structure du projet
4. Les d√©pendances n√©cessaires

R√©pondre en JSON:
{{
    "language": "python|javascript|java|etc",
    "files_to_create": [
        {{"filename": "main.py", "description": "Point d'entr√©e principal"}},
        ...
    ],
    "dependencies": ["liste des d√©pendances"],
    "project_structure": "description de la structure"
}}"""

            analysis_result = await self.llm_service.generate(
                prompt=analysis_prompt,
                json_response=True
            )
            
            if not analysis_result.get('success'):
                raise Exception("Erreur lors de l'analyse de la requ√™te")
            
            analysis = analysis_result['response']
            logger.info(f"Analyse compl√©t√©e: {analysis}")
            
            # 3. G√©n√©rer le code pour chaque fichier
            generated_files = []
            
            for file_spec in analysis.get('files_to_create', []):
                filename = file_spec['filename']
                description = file_spec['description']
                
                # G√©n√©rer le code avec le LLM
                code_prompt = f"""G√©n√©rer le code complet pour ce fichier:

Projet: {request}
Fichier: {filename}
Description: {description}
Langage: {analysis.get('language', 'python')}

G√©n√©rer uniquement le code, sans explications. Le code doit √™tre complet et fonctionnel."""

                code_result = await self.llm_service.generate(
                    prompt=code_prompt,
                    json_response=False
                )
                
                if code_result.get('success'):
                    code_content = code_result['response']
                    
                    # D√©terminer le sous-r√©pertoire
                    if filename.endswith(('.py', '.js', '.java', '.cpp', '.go')):
                        subdir = "src"
                    elif filename.endswith(('_test.py', '.test.js', 'Test.java')):
                        subdir = "tests"
                    elif filename.endswith(('.md', '.txt', '.rst')):
                        subdir = "docs"
                    else:
                        subdir = "src"
                    
                    # Sauvegarder le fichier
                    file_path = f"projects/{self.agent_id}/{project_name}/{subdir}/{filename}"
                    
                    save_result = await filesystem_tool.execute(
                        action="write",
                        file_path=file_path,
                        content=code_content,
                        agent_id=self.agent_id
                    )
                    
                    if save_result.success:
                        generated_files.append({
                            "filename": filename,
                            "path": save_result.data["file_path"],
                            "size": save_result.data["size"]
                        })
                        logger.info(f"Fichier g√©n√©r√©: {filename}")
                    else:
                        logger.error(f"Erreur sauvegarde {filename}: {save_result.error}")
                
            # 4. Cr√©er un fichier requirements/package.json si n√©cessaire
            if analysis.get('dependencies'):
                if analysis.get('language') == 'python':
                    requirements = "\n".join(analysis['dependencies'])
                    await filesystem_tool.execute(
                        action="write",
                        file_path=f"projects/{self.agent_id}/{project_name}/requirements.txt",
                        content=requirements,
                        agent_id=self.agent_id
                    )
                elif analysis.get('language') == 'javascript':
                    package_json = {
                        "name": project_name,
                        "version": "1.0.0",
                        "description": request,
                        "dependencies": {dep: "latest" for dep in analysis['dependencies']}
                    }
                    await filesystem_tool.execute(
                        action="write",
                        file_path=f"projects/{self.agent_id}/{project_name}/package.json",
                        content=json.dumps(package_json, indent=2),
                        agent_id=self.agent_id
                    )
            
            # 5. Cr√©er un README pour le projet
            readme_content = f"""# {project_name}

## Description
{request}

## Structure du projet
{analysis.get('project_structure', 'Structure standard')}

## Fichiers g√©n√©r√©s
{chr(10).join([f"- {f['filename']}" for f in generated_files])}

## D√©pendances
{chr(10).join([f"- {dep}" for dep in analysis.get('dependencies', [])])}

## Utilisation
Consultez les fichiers g√©n√©r√©s pour les instructions sp√©cifiques.

---
G√©n√©r√© par l'agent: {self.name}
Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            await filesystem_tool.execute(
                action="write",
                file_path=f"projects/{self.agent_id}/{project_name}/README.md",
                content=readme_content,
                agent_id=self.agent_id
            )
            
            # 6. G√©n√©rer un rapport
            report = {
                "success": True,
                "agent": self.name,
                "project_name": project_name,
                "project_path": project_path,
                "language": analysis.get('language'),
                "files_generated": generated_files,
                "total_files": len(generated_files),
                "dependencies": analysis.get('dependencies', [])
            }
            
            # Sauvegarder le rapport
            report_path = f"outputs/report_{self.agent_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            await filesystem_tool.execute(
                action="write",
                file_path=report_path,
                content=json.dumps(report, indent=2),
                agent_id=self.agent_id
            )
            
            return report
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration: {e}")
            return {
                "success": False,
                "error": str(e),
                "agent": self.name
            }

async def main():
    """Fonction principale de d√©monstration"""
    print("ü§ñ Agent G√©n√©rateur de Code")
    print("="*50)
    
    agent = CodeGeneratorAgent()
    print(f"Agent cr√©√©: {agent.name}")
    
    # Exemples de requ√™tes
    examples = [
        "Cr√©er une API REST simple en Python avec FastAPI pour g√©rer une liste de t√¢ches",
        "Cr√©er une calculatrice en Python avec interface graphique tkinter",
        "Cr√©er un script Python pour analyser des fichiers CSV et g√©n√©rer des graphiques",
        "Cr√©er une application web de chat en temps r√©el avec Node.js et Socket.io"
    ]
    
    print("\nüìù Exemples de requ√™tes:")
    for i, ex in enumerate(examples, 1):
        print(f"{i}. {ex}")
    
    # Requ√™te interactive ou exemple
    try:
        choice = input("\nChoisir un exemple (1-4) ou entrer votre requ√™te: ").strip()
        
        if choice.isdigit() and 1 <= int(choice) <= len(examples):
            request = examples[int(choice) - 1]
        else:
            request = choice
        
        project_name = input("Nom du projet (d√©faut: generated_project): ").strip()
        if not project_name:
            project_name = "generated_project"
        
        print(f"\nüöÄ G√©n√©ration en cours pour: {request}")
        print(f"üìÅ Projet: {project_name}")
        
        # G√©n√©rer le code
        result = await agent.generate_code(request, project_name)
        
        if result['success']:
            print(f"\n‚úÖ G√©n√©ration r√©ussie!")
            print(f"üìÅ Projet cr√©√© dans: {result['project_path']}")
            print(f"üìÑ Fichiers g√©n√©r√©s: {result['total_files']}")
            for file in result['files_generated']:
                print(f"   - {file['filename']} ({file['size']} octets)")
            
            # Afficher comment acc√©der aux fichiers
            print(f"\nüí° Pour voir les fichiers g√©n√©r√©s:")
            print(f"   Localement: ./agent_workspace/projects/{agent.agent_id}/{project_name}/")
            print(f"   Dans Docker: docker-compose -f docker-compose.dev.yml exec core ls -la {result['project_path']}")
        else:
            print(f"\n‚ùå Erreur: {result['error']}")
            
    except KeyboardInterrupt:
        print("\n\nüëã G√©n√©ration annul√©e")
    except Exception as e:
        print(f"\n‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())