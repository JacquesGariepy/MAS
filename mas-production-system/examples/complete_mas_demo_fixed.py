#!/usr/bin/env python3
"""
Version corrig√©e du syst√®me MAS : Gestionnaire de Projet Intelligent

Cette version corrige les probl√®mes d'authentification et utilise des identifiants
uniques pour chaque ex√©cution pour √©viter les conflits.
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from uuid import uuid4
import aiohttp
from enum import Enum
import time

# Configuration
API_BASE_URL = "http://localhost:8000/api/v1"
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ProjectPhase(Enum):
    """Phases du projet"""
    ANALYSIS = "analysis"
    PLANNING = "planning"
    DEVELOPMENT = "development"
    TESTING = "testing"
    DOCUMENTATION = "documentation"
    DEPLOYMENT = "deployment"
    DELIVERY = "delivery"
    COMPLETED = "completed"

class ProjectManagementSystem:
    """Syst√®me de gestion de projet avec agents MAS"""
    
    def __init__(self):
        self.agents = {}
        self.users = {}
        self.project_data = {}
        self.current_phase = ProjectPhase.ANALYSIS
        self.communication_log = []
        self.deliverables = {}
        # Suffixe unique pour cette ex√©cution
        self.session_id = str(int(time.time()))[-6:]
        
    async def initialize_system(self):
        """Initialise le syst√®me complet avec tous les agents"""
        print("\n" + "="*80)
        print("üöÄ INITIALISATION DU SYST√àME DE GESTION DE PROJET MAS")
        print("="*80)
        print(f"üìç Session ID: {self.session_id}")
        
        async with aiohttp.ClientSession() as session:
            # Cr√©er les utilisateurs et agents
            await self._create_project_team(session)
            
            # Configurer les capacit√©s de chaque agent
            await self._configure_agent_capabilities(session)
            
            # √âtablir les canaux de communication
            await self._setup_communication_channels(session)
            
        print(f"\n‚úÖ Syst√®me initialis√© avec succ√®s!")
        print(f"   ‚Ä¢ {len(self.agents)} agents cr√©√©s")
        print(f"   ‚Ä¢ Tous les canaux de communication √©tablis")
        print(f"   ‚Ä¢ Pr√™t √† recevoir les demandes clients\n")
    
    async def _create_project_team(self, session: aiohttp.ClientSession):
        """Cr√©e l'√©quipe compl√®te du projet avec des identifiants uniques"""
        team_config = [
            {
                "username": f"pm_{self.session_id}",
                "email": f"pm_{self.session_id}@mas.com",
                "agent_name": "ProjectManager",
                "agent_type": "hybrid",
                "role": "Chef de projet - Coordination et strat√©gie",
                "capabilities": {
                    "skills": ["project_management", "planning", "coordination", "risk_assessment"],
                    "role": "Project Manager",
                    "decision_threshold": 0.7
                }
            },
            {
                "username": f"tech_{self.session_id}",
                "email": f"tech_{self.session_id}@mas.com",
                "agent_name": "TechLead",
                "agent_type": "cognitive",
                "role": "Architecte technique principal",
                "capabilities": {
                    "skills": ["architecture", "system_design", "code_review", "technical_decisions"],
                    "role": "Technical Lead",
                    "expertise": ["python", "fastapi", "postgresql", "docker", "kubernetes"]
                }
            },
            {
                "username": f"dev1_{self.session_id}",
                "email": f"dev1_{self.session_id}@mas.com",
                "agent_name": "BackendDeveloper",
                "agent_type": "cognitive",
                "role": "D√©veloppeur Backend Senior",
                "capabilities": {
                    "skills": ["backend_development", "api_design", "database_design", "testing"],
                    "role": "Backend Developer",
                    "expertise": ["python", "fastapi", "sqlalchemy", "postgresql"]
                }
            },
            {
                "username": f"dev2_{self.session_id}",
                "email": f"dev2_{self.session_id}@mas.com",
                "agent_name": "FrontendDeveloper",
                "agent_type": "cognitive",
                "role": "D√©veloppeur Frontend Senior",
                "capabilities": {
                    "skills": ["frontend_development", "ui_design", "responsive_design", "testing"],
                    "role": "Frontend Developer",
                    "expertise": ["react", "typescript", "tailwindcss", "nextjs"]
                }
            },
            {
                "username": f"qa_{self.session_id}",
                "email": f"qa_{self.session_id}@mas.com",
                "agent_name": "QAEngineer",
                "agent_type": "hybrid",
                "role": "Ing√©nieur Assurance Qualit√©",
                "capabilities": {
                    "skills": ["testing", "test_automation", "quality_assurance", "bug_tracking"],
                    "role": "QA Engineer",
                    "tools": ["pytest", "selenium", "postman", "jira"]
                }
            },
            {
                "username": f"devops_{self.session_id}",
                "email": f"devops_{self.session_id}@mas.com",
                "agent_name": "DevOpsEngineer",
                "agent_type": "reflexive",
                "role": "Ing√©nieur DevOps - Infrastructure et d√©ploiement",
                "capabilities": {
                    "skills": ["deployment", "ci_cd", "infrastructure", "monitoring"],
                    "role": "DevOps Engineer",
                    "tools": ["docker", "kubernetes", "github_actions", "terraform"]
                }
            },
            {
                "username": f"doc_{self.session_id}",
                "email": f"doc_{self.session_id}@mas.com",
                "agent_name": "DocumentationWriter",
                "agent_type": "cognitive",
                "role": "R√©dacteur technique",
                "capabilities": {
                    "skills": ["technical_writing", "documentation", "api_docs", "user_guides"],
                    "role": "Documentation Writer",
                    "formats": ["markdown", "openapi", "docusaurus", "readme"]
                }
            },
            {
                "username": f"client_{self.session_id}",
                "email": f"client_{self.session_id}@mas.com",
                "agent_name": "ClientLiaison",
                "agent_type": "hybrid",
                "role": "Responsable relation client",
                "capabilities": {
                    "skills": ["communication", "requirement_gathering", "client_management", "reporting"],
                    "role": "Client Liaison",
                    "communication_style": "professional_friendly"
                }
            }
        ]
        
        print(f"\nüìã Cr√©ation de l'√©quipe du projet (Session: {self.session_id})...")
        print("-" * 60)
        
        success_count = 0
        for member in team_config:
            # Cr√©er l'utilisateur
            user_data = await self._create_user(
                session,
                member["username"],
                member["email"],
                "secure_password_123"
            )
            
            if user_data:
                # Cr√©er l'agent
                agent_data = await self._create_agent(
                    session,
                    user_data["token"],
                    member["agent_name"],
                    member["agent_type"],
                    member["capabilities"]
                )
                
                if agent_data:
                    self.agents[member["agent_name"]] = {
                        "id": agent_data["id"],
                        "type": member["agent_type"],
                        "role": member["role"],
                        "capabilities": member["capabilities"],
                        "token": user_data["token"],
                        "status": "ready"
                    }
                    success_count += 1
                    print(f"‚úÖ {member['agent_name']} ({member['agent_type']}) - {member['role']}")
                else:
                    print(f"‚ö†Ô∏è {member['agent_name']} - Agent creation failed")
            else:
                print(f"‚ùå {member['agent_name']} - User creation failed")
        
        print(f"\nüìä R√©sultat: {success_count}/{len(team_config)} agents cr√©√©s avec succ√®s")
    
    async def process_client_request(self, client_request: Dict[str, Any]):
        """Traite une demande client de bout en bout"""
        print("\n" + "="*80)
        print("üì® NOUVELLE DEMANDE CLIENT RE√áUE")
        print("="*80)
        
        self.project_data = {
            "id": f"project_{uuid4().hex[:8]}",
            "client_request": client_request,
            "created_at": datetime.utcnow().isoformat(),
            "phases": {},
            "status": "active"
        }
        
        # Afficher la demande
        print(f"\nüè¢ Client: {client_request['client_name']}")
        print(f"üìã Projet: {client_request['project_name']}")
        print(f"üìù Description: {client_request['description']}")
        print(f"üìÖ Deadline: {client_request['deadline']}")
        print(f"üí∞ Budget: ${client_request['budget']:,}")
        
        # Simuler le workflow m√™me si les agents ne sont pas tous cr√©√©s
        await self._simulate_workflow()
        
        print("\n" + "="*80)
        print("üéâ PROJET TERMIN√â AVEC SUCC√àS!")
        print("="*80)
        self._display_final_summary()
    
    async def _simulate_workflow(self):
        """Simule le workflow complet du projet"""
        phases = [
            ("üîç PHASE 1: ANALYSE DE LA DEMANDE", self._simulate_analysis),
            ("üìÖ PHASE 2: PLANIFICATION DU PROJET", self._simulate_planning),
            ("üíª PHASE 3: D√âVELOPPEMENT", self._simulate_development),
            ("üß™ PHASE 4: TESTS ET ASSURANCE QUALIT√â", self._simulate_testing),
            ("üìö PHASE 5: DOCUMENTATION", self._simulate_documentation),
            ("üöÄ PHASE 6: D√âPLOIEMENT", self._simulate_deployment),
            ("üéÅ PHASE 7: LIVRAISON AU CLIENT", self._simulate_delivery)
        ]
        
        for phase_name, phase_func in phases:
            print(f"\n\n{phase_name}")
            print("-" * 60)
            await phase_func()
            await asyncio.sleep(1)  # Pause pour la lisibilit√©
    
    async def _simulate_analysis(self):
        """Simule la phase d'analyse"""
        print("üì§ ClientLiaison: Analyse des besoins client...")
        await asyncio.sleep(0.5)
        print("üì§ TechLead: Analyse de faisabilit√© technique...")
        await asyncio.sleep(0.5)
        print("\n‚úÖ Phase d'analyse compl√©t√©e")
        
        self.project_data["phases"]["analysis"] = {
            "requirements": {
                "functional": ["User management", "Leave system", "Performance reviews"],
                "technical": ["REST API", "React frontend", "PostgreSQL"],
                "constraints": ["GDPR compliance", "99.9% uptime", "Mobile responsive"]
            },
            "feasibility": {
                "technical": "Feasible with current tech stack",
                "timeline": "6 weeks achievable",
                "risks": ["Integration complexity", "Data migration"]
            },
            "completed_at": datetime.utcnow().isoformat()
        }
    
    async def _simulate_planning(self):
        """Simule la phase de planification"""
        print("üì§ ProjectManager: Cr√©ation du plan de projet...")
        await asyncio.sleep(0.5)
        
        print("\nüìä Distribution des t√¢ches par le ProjectManager:")
        
        task_distribution = {
            "sprint_1": {
                "duration": "2 semaines",
                "tasks": [
                    {"agent": "TechLead", "task": "Concevoir l'architecture syst√®me"},
                    {"agent": "BackendDeveloper", "task": "Impl√©menter l'API REST"},
                    {"agent": "FrontendDeveloper", "task": "Cr√©er l'interface utilisateur"},
                    {"agent": "DevOpsEngineer", "task": "Configurer l'environnement de d√©veloppement"}
                ]
            },
            "sprint_2": {
                "duration": "2 semaines",
                "tasks": [
                    {"agent": "BackendDeveloper", "task": "Impl√©menter la logique m√©tier"},
                    {"agent": "FrontendDeveloper", "task": "Int√©grer avec l'API"},
                    {"agent": "QAEngineer", "task": "Cr√©er les tests automatis√©s"},
                    {"agent": "DocumentationWriter", "task": "Commencer la documentation"}
                ]
            }
        }
        
        for sprint, details in task_distribution.items():
            print(f"\n   {sprint.upper()} ({details['duration']}):")
            for task in details['tasks']:
                print(f"   ‚Ä¢ {task['agent']}: {task['task']}")
        
        print("\n‚úÖ Phase de planification compl√©t√©e")
    
    async def _simulate_development(self):
        """Simule la phase de d√©veloppement"""
        print("\nüèÉ SPRINT 1: Architecture et Fondations")
        print("-" * 40)
        
        print("üì§ TechLead: Conception de l'architecture...")
        await asyncio.sleep(0.5)
        
        print("\nüîß D√©veloppement en parall√®le:")
        tasks = [
            "API Backend impl√©ment√©e",
            "Interface Frontend cr√©√©e",
            "Infrastructure configur√©e"
        ]
        
        for task in tasks:
            print(f"   ‚úÖ {task}")
            await asyncio.sleep(0.3)
        
        print("\nüîÑ Synchronisation de l'√©quipe...")
        print("\nü§ù R√©union d'√©quipe: Sprint 1 Review")
        print("   ‚Ä¢ Tous les agents synchronis√©s")
        print("   ‚Ä¢ Blockers identifi√©s et r√©solus")
        print("   ‚Ä¢ Prochaines √©tapes clarifi√©es")
        
        print("\n\nüèÉ SPRINT 2: Fonctionnalit√©s Avanc√©es")
        print("-" * 40)
        
        print("\nüöÄ D√©veloppement des fonctionnalit√©s avanc√©es:")
        features = [
            "Syst√®me d'authentification JWT",
            "WebSocket pour les mises √† jour temps r√©el",
            "Dashboard analytique",
            "Syst√®me de notifications push"
        ]
        
        for feature in features:
            print(f"   ‚Ä¢ {feature}")
            await asyncio.sleep(0.3)
        
        print("\n‚úÖ Phase de d√©veloppement compl√©t√©e")
    
    async def _simulate_testing(self):
        """Simule la phase de tests"""
        print("üì§ QAEngineer: Ex√©cution des tests...")
        await asyncio.sleep(0.5)
        
        print("\nüìä R√©sultats des tests:")
        print("   ‚Ä¢ Tests unitaires: 156/156 ‚úÖ (100%)")
        print("   ‚Ä¢ Tests d'int√©gration: 45/48 ‚ö†Ô∏è (93.75%)")
        print("   ‚Ä¢ Tests E2E: 22/25 ‚ö†Ô∏è (88%)")
        print("   ‚Ä¢ Coverage: 87%")
        
        print("\nüêõ Bugs identifi√©s:")
        bugs = [
            {"severity": "HIGH", "component": "backend", "description": "API timeout sur charge √©lev√©e"},
            {"severity": "MEDIUM", "component": "frontend", "description": "Probl√®me de responsive sur mobile"},
            {"severity": "LOW", "component": "backend", "description": "Log verbeux en production"}
        ]
        
        for bug in bugs:
            print(f"   ‚Ä¢ [{bug['severity']}] {bug['component']}: {bug['description']}")
        
        print("\nüîß Correction des bugs en cours...")
        await asyncio.sleep(1)
        
        print("\n‚úÖ Tous les bugs critiques corrig√©s")
        print("üìä Tests de r√©gression: 100% pass√©s")
        print("\n‚úÖ Phase de tests compl√©t√©e")
    
    async def _simulate_documentation(self):
        """Simule la phase de documentation"""
        print("üì§ DocumentationWriter: Cr√©ation de la documentation...")
        await asyncio.sleep(0.5)
        
        print("\nüìÑ Documents cr√©√©s:")
        docs = [
            "README.md - Guide de d√©marrage rapide",
            "API_REFERENCE.md - Documentation compl√®te de l'API",
            "ARCHITECTURE.md - D√©cisions d'architecture",
            "USER_GUIDE.md - Guide utilisateur d√©taill√©",
            "DEPLOYMENT.md - Guide de d√©ploiement",
            "CONTRIBUTING.md - Guide de contribution"
        ]
        
        for doc in docs:
            print(f"   ‚Ä¢ {doc}")
            await asyncio.sleep(0.2)
        
        print("\nüëÄ Revue collaborative de la documentation...")
        print("   ‚úÖ Documentation technique valid√©e par TechLead")
        print("   ‚úÖ Guide utilisateur valid√© par ClientLiaison")
        
        print("\n‚úÖ Phase de documentation compl√©t√©e")
    
    async def _simulate_deployment(self):
        """Simule la phase de d√©ploiement"""
        print("üì§ DevOpsEngineer: D√©ploiement en production...")
        
        steps = [
            "üîç V√©rification des pr√©requis",
            "üì¶ Build des images Docker",
            "üîê Configuration des secrets",
            "‚ò∏Ô∏è D√©ploiement sur Kubernetes",
            "üîÑ Migration de base de donn√©es",
            "üåê Configuration du load balancer",
            "üìä Activation du monitoring",
            "‚úÖ Tests de sant√©"
        ]
        
        for step in steps:
            print(f"   {step}")
            await asyncio.sleep(0.3)
        
        print("\nüîç V√©rification post-d√©ploiement:")
        checks = [
            "Application: ‚úÖ Running",
            "Database: ‚úÖ Connected",
            "API Health: ‚úÖ Healthy",
            "SSL Certificate: ‚úÖ Valid",
            "Monitoring: ‚úÖ Active"
        ]
        
        for check in checks:
            print(f"   ‚Ä¢ {check}")
        
        print("\nüåê URLs de production:")
        print("   ‚Ä¢ Application: https://app.project-mas.com")
        print("   ‚Ä¢ API: https://api.project-mas.com")
        print("   ‚Ä¢ Documentation: https://docs.project-mas.com")
        print("   ‚Ä¢ Monitoring: https://monitoring.project-mas.com")
        
        print("\n‚úÖ Phase de d√©ploiement compl√©t√©e")
    
    async def _simulate_delivery(self):
        """Simule la phase de livraison"""
        print("üì§ ClientLiaison: Pr√©paration du package de livraison...")
        await asyncio.sleep(0.5)
        
        print("\nüì¶ Package de livraison:")
        deliverables = [
            "Code source complet (GitHub)",
            "Documentation compl√®te",
            "Acc√®s aux environnements",
            "Guide de d√©marrage rapide",
            "Contrat de maintenance",
            "Rapport de projet d√©taill√©"
        ]
        
        for item in deliverables:
            print(f"   ‚Ä¢ {item}")
        
        print("\nüí¨ Communication avec le client:")
        print(f"   De: ClientLiaison")
        print(f"   √Ä: {self.project_data['client_request']['client_name']}")
        print(f"   Objet: Livraison du projet {self.project_data['client_request']['project_name']}")
        print("\n   Message:")
        print("   Nous sommes heureux de vous annoncer que votre projet")
        print("   a √©t√© compl√©t√© avec succ√®s. Tous les objectifs ont √©t√©")
        print("   atteints et l'application est maintenant en production.")
        
        print("\nüìä M√©triques du projet:")
        print(f"   ‚Ä¢ Dur√©e totale: 6 semaines")
        print(f"   ‚Ä¢ Budget utilis√©: 92% du budget allou√©")
        print(f"   ‚Ä¢ Qualit√©: 98% (bas√© sur les tests et revues)")
        print(f"   ‚Ä¢ Satisfaction √©quipe: 95%")
        
        print("\n‚úÖ Projet livr√© avec succ√®s!")
    
    # M√©thodes utilitaires
    async def _create_user(self, session: aiohttp.ClientSession, 
                          username: str, email: str, password: str) -> Optional[Dict]:
        """Cr√©e un utilisateur et retourne le token"""
        try:
            # Enregistrement
            register_data = {
                "username": username,
                "email": email,
                "password": password
            }
            
            async with session.post(
                f"{API_BASE_URL.replace('/api/v1', '')}/auth/register",
                json=register_data
            ) as resp:
                if resp.status not in [200, 201]:
                    text = await resp.text()
                    logger.error(f"Failed to register {username}: {resp.status} - {text}")
                    return None
            
            # Connexion
            login_data = {
                "username": username,
                "password": password
            }
            
            async with session.post(
                f"{API_BASE_URL.replace('/api/v1', '')}/auth/login",
                data=login_data
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return {
                        "token": data["access_token"],
                        "username": username
                    }
                else:
                    logger.error(f"Failed to login {username}: {resp.status}")
                    
        except Exception as e:
            logger.error(f"Error creating user {username}: {str(e)}")
        
        return None
    
    async def _create_agent(self, session: aiohttp.ClientSession,
                           token: str, name: str, agent_type: str,
                           capabilities: Dict) -> Optional[Dict]:
        """Cr√©e un agent avec les capacit√©s sp√©cifi√©es"""
        try:
            headers = {"Authorization": f"Bearer {token}"}
            
            agent_data = {
                "name": f"{name}_{self.session_id}",
                "type": agent_type,
                "description": capabilities.get("role", "Agent MAS"),
                "capabilities": capabilities,
                "model": "gpt-4"
            }
            
            async with session.post(
                f"{API_BASE_URL}/agents",
                json=agent_data,
                headers=headers
            ) as resp:
                if resp.status == 200:
                    agent = await resp.json()
                    
                    # D√©marrer l'agent
                    async with session.post(
                        f"{API_BASE_URL}/agents/{agent['id']}/start",
                        headers=headers
                    ) as start_resp:
                        if start_resp.status == 200:
                            return agent
                        else:
                            logger.error(f"Failed to start agent {name}: {start_resp.status}")
                else:
                    text = await resp.text()
                    logger.error(f"Failed to create agent {name}: {resp.status} - {text}")
                            
        except Exception as e:
            logger.error(f"Error creating agent {name}: {str(e)}")
        
        return None
    
    async def _configure_agent_capabilities(self, session: aiohttp.ClientSession):
        """Configure les capacit√©s d√©taill√©es de chaque agent"""
        # Configuration avanc√©e des agents (r√®gles, seuils, etc.)
        pass
    
    async def _setup_communication_channels(self, session: aiohttp.ClientSession):
        """√âtablit les canaux de communication entre agents"""
        # Configuration des canaux de communication privil√©gi√©s
        pass
    
    def _display_final_summary(self):
        """Affiche le r√©sum√© final du projet"""
        print("\nüìä R√âSUM√â FINAL DU PROJET")
        print("="*60)
        print(f"üÜî ID Projet: {self.project_data['id']}")
        print(f"üìã Nom: {self.project_data['client_request']['project_name']}")
        print(f"üè¢ Client: {self.project_data['client_request']['client_name']}")
        print(f"‚è±Ô∏è Dur√©e: 6 semaines")
        print(f"üë• √âquipe: {len(self.agents)} agents actifs")
        print(f"üì® Communications: Simulation compl√®te")
        
        print("\n‚úÖ Livrables:")
        print("   ‚Ä¢ Application web compl√®te")
        print("   ‚Ä¢ API REST document√©e")
        print("   ‚Ä¢ Tests automatis√©s (87% coverage)")
        print("   ‚Ä¢ Documentation compl√®te")
        print("   ‚Ä¢ Infrastructure DevOps")
        print("   ‚Ä¢ Monitoring et alerting")
        
        print("\nüéØ Objectifs atteints:")
        print("   ‚Ä¢ ‚úÖ Respect du d√©lai")
        print("   ‚Ä¢ ‚úÖ Dans le budget")
        print("   ‚Ä¢ ‚úÖ Qualit√© production")
        print("   ‚Ä¢ ‚úÖ Client satisfait")


async def main():
    """Fonction principale pour d√©montrer le syst√®me complet"""
    
    # Cr√©er le syst√®me
    pms = ProjectManagementSystem()
    
    # Initialiser avec tous les agents
    await pms.initialize_system()
    
    # Simuler une demande client
    client_request = {
        "client_name": "TechCorp Industries",
        "project_name": "Plateforme de Gestion des Ressources Humaines",
        "description": """
        Nous avons besoin d'une plateforme moderne de gestion RH incluant:
        - Gestion des employ√©s et des d√©partements
        - Syst√®me de cong√©s et absences
        - √âvaluations de performance
        - Tableau de bord analytique
        - Int√©gration avec notre syst√®me de paie existant
        - Application mobile pour les employ√©s
        """,
        "requirements": [
            "Interface web responsive",
            "API REST pour int√©grations",
            "Authentification SSO",
            "Support multi-tenant",
            "Conformit√© RGPD",
            "Haute disponibilit√© (99.9%)"
        ],
        "deadline": (datetime.utcnow() + timedelta(days=42)).isoformat(),
        "budget": 150000,
        "contact": "john.doe@techcorp.com"
    }
    
    # Traiter la demande de bout en bout
    await pms.process_client_request(client_request)
    
    print("\nüéâ D√©monstration compl√®te du syst√®me MAS termin√©e!")
    print("Cette d√©monstration a illustr√©:")
    print("‚Ä¢ La cr√©ation d'agents sp√©cialis√©s")
    print("‚Ä¢ La gestion compl√®te d'un projet de d√©veloppement")
    print("‚Ä¢ Les phases de d√©veloppement de A √† Z")
    print("‚Ä¢ La collaboration simul√©e entre agents")
    print("‚Ä¢ La livraison r√©ussie au client")


if __name__ == "__main__":
    asyncio.run(main())