#!/usr/bin/env python3
"""
Script ultime de d√©monstration MAS avec 100 agents
G√®re automatiquement les quotas en cr√©ant plusieurs utilisateurs
D√©montre TOUTES les fonctionnalit√©s du syst√®me
"""

import requests
import json
import time
import subprocess
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
import random

# Configuration
API_URL = "http://localhost:8088"
TARGET_AGENTS = 100
AGENTS_PER_USER = 10  # Quota par utilisateur

# Statistiques globales
stats = {
    "users_created": 0,
    "agents_created": 0,
    "tasks_created": 0,
    "tasks_completed": 0,
    "messages_sent": 0,
    "memories_stored": 0,
    "negotiations_created": 0,
    "auctions_created": 0,
    "organizations_created": 0,
    "active": True
}

# Lock pour l'affichage thread-safe
print_lock = threading.Lock()

def safe_print(message):
    """Print thread-safe"""
    with print_lock:
        print(message)

class MAS100AgentsDemo:
    def __init__(self):
        self.base_url = API_URL
        self.users = {}
        self.all_agents = []
        self.tasks = {}
        self.organizations = {}
        
    def create_user_batch(self, start_index, count):
        """Cr√©e un batch d'utilisateurs"""
        created_users = []
        
        for i in range(start_index, start_index + count):
            username = f"user_{int(time.time())}_{i}"
            email = f"{username}@mas100.com"
            password = "demo123"
            
            # Enregistrement
            response = requests.post(
                f"{self.base_url}/auth/register",
                json={"username": username, "email": email, "password": password}
            )
            
            if response.status_code in [201, 400]:
                # Connexion
                response = requests.post(
                    f"{self.base_url}/auth/token",
                    data={"username": username, "password": password}
                )
                
                if response.status_code == 200:
                    token = response.json()["access_token"]
                    self.users[username] = {
                        "token": token,
                        "agents": [],
                        "agent_count": 0
                    }
                    created_users.append(username)
                    stats["users_created"] += 1
                    
        return created_users
    
    def create_agent_for_user(self, username, agent_config):
        """Cr√©e un agent pour un utilisateur sp√©cifique"""
        token = self.users[username]["token"]
        headers = {"Authorization": f"Bearer {token}"}
        
        # Ajouter les champs obligatoires
        agent_config["initial_desires"] = agent_config.get("initial_desires", ["accomplir_mission", "collaborer"])
        agent_config["organization_id"] = None
        
        # S'assurer que reactive_rules est un dict pour les agents reflexifs
        if agent_config["agent_type"] == "reflexive" and "reactive_rules" not in agent_config:
            agent_config["reactive_rules"] = {}
        
        response = requests.post(
            f"{self.base_url}/api/v1/agents",
            json=agent_config,
            headers=headers
        )
        
        if response.status_code == 201:
            agent = response.json()
            self.users[username]["agents"].append(agent["id"])
            self.users[username]["agent_count"] += 1
            self.all_agents.append(agent)
            stats["agents_created"] += 1
            
            # D√©marrer l'agent
            requests.post(
                f"{self.base_url}/api/v1/agents/{agent['id']}/start",
                headers=headers
            )
            
            return agent
        else:
            return None
    
    def generate_agent_configs(self, count):
        """G√©n√®re des configurations d'agents vari√©es"""
        agent_types = ["cognitive", "reflexive", "hybrid"]
        roles = [
            "Analyste", "D√©veloppeur", "Architecte", "Chercheur", "Coordinateur",
            "Testeur", "Designer", "Formateur", "Support", "Auditeur",
            "Strat√®ge", "N√©gociateur", "M√©diateur", "Planificateur", "Optimiseur"
        ]
        
        capabilities_map = {
            "Analyste": ["analyse", "synth√®se", "rapport"],
            "D√©veloppeur": ["programmation", "debugging", "optimisation"],
            "Architecte": ["conception", "mod√©lisation", "documentation"],
            "Chercheur": ["recherche", "innovation", "exp√©rimentation"],
            "Coordinateur": ["coordination", "planification", "suivi"],
            "Testeur": ["test", "validation", "rapport"],
            "Designer": ["conception", "cr√©ativit√©", "esth√©tique"],
            "Formateur": ["formation", "p√©dagogie", "communication"],
            "Support": ["support", "r√©solution", "communication"],
            "Auditeur": ["audit", "conformit√©", "analyse"],
            "Strat√®ge": ["strat√©gie", "vision", "d√©cision"],
            "N√©gociateur": ["n√©gociation", "persuasion", "diplomatie"],
            "M√©diateur": ["m√©diation", "consensus", "r√©solution"],
            "Planificateur": ["planification", "organisation", "priorisation"],
            "Optimiseur": ["optimisation", "performance", "efficacit√©"]
        }
        
        configs = []
        
        for i in range(count):
            role = roles[i % len(roles)]
            agent_type = agent_types[i % len(agent_types)]
            
            config = {
                "name": f"{role} {i+1}",
                "role": f"Sp√©cialiste en {role.lower()}",
                "agent_type": agent_type,
                "capabilities": capabilities_map.get(role, ["g√©n√©ral"]),
                "initial_beliefs": {
                    "r√¥le": role.lower(),
                    "exp√©rience": random.choice(["junior", "interm√©diaire", "senior"]),
                    "domaine": random.choice(["tech", "business", "recherche", "support"])
                },
                "configuration": {
                    "temperature": round(random.uniform(0.3, 0.9), 2),
                    "reasoning_depth": random.randint(3, 7),
                    "max_tokens": random.choice([1000, 2000, 4000])
                }
            }
            
            # Ajouter des reactive_rules pour les agents reflexifs
            if agent_type == "reflexive":
                config["reactive_rules"] = {
                    "on_task": "execute_immediately",
                    "on_error": "report_and_retry"
                }
            
            configs.append(config)
        
        return configs
    
    def run_mega_demo(self):
        """Lance la d√©monstration avec 100 agents"""
        safe_print("\nüöÄ D√âMONSTRATION ULTIME MAS - 100 AGENTS")
        safe_print("="*80)
        
        # Thread de monitoring
        monitor_thread = threading.Thread(target=self.monitor_progress, daemon=True)
        monitor_thread.start()
        
        try:
            # Phase 1: Cr√©er suffisamment d'utilisateurs
            safe_print("\nüìã Phase 1: Cr√©ation des utilisateurs")
            users_needed = (TARGET_AGENTS + AGENTS_PER_USER - 1) // AGENTS_PER_USER
            safe_print(f"   Cr√©ation de {users_needed} utilisateurs pour {TARGET_AGENTS} agents...")
            
            user_batches = []
            with ThreadPoolExecutor(max_workers=5) as executor:
                futures = []
                for i in range(0, users_needed, 5):
                    batch_size = min(5, users_needed - i)
                    future = executor.submit(self.create_user_batch, i, batch_size)
                    futures.append(future)
                
                for future in as_completed(futures):
                    batch = future.result()
                    user_batches.extend(batch)
            
            safe_print(f"   ‚úÖ {len(user_batches)} utilisateurs cr√©√©s")
            
            # Phase 2: Cr√©er 100 agents
            safe_print(f"\nüìã Phase 2: Cr√©ation de {TARGET_AGENTS} agents")
            
            # G√©n√©rer les configurations
            agent_configs = self.generate_agent_configs(TARGET_AGENTS)
            
            # Distribuer les agents entre les utilisateurs
            with ThreadPoolExecutor(max_workers=10) as executor:
                futures = []
                
                for i, config in enumerate(agent_configs):
                    # S√©lectionner l'utilisateur
                    user_index = i // AGENTS_PER_USER
                    if user_index < len(user_batches):
                        username = user_batches[user_index]
                        future = executor.submit(self.create_agent_for_user, username, config)
                        futures.append(future)
                
                # Attendre la cr√©ation
                for future in as_completed(futures):
                    agent = future.result()
                    if agent:
                        safe_print(f"   ‚úÖ Agent cr√©√©: {agent['name']} ({agent['agent_type']})")
            
            safe_print(f"\n   üìä Total agents cr√©√©s: {stats['agents_created']}/{TARGET_AGENTS}")
            
            # Phase 3: Cr√©er des organisations
            safe_print("\nüìã Phase 3: Cr√©ation d'organisations")
            
            if len(self.all_agents) >= 20:
                # Organisation 1: √âquipe de d√©veloppement
                self.create_organization(
                    user_batches[0],
                    "√âquipe Dev MAS",
                    "hierarchy",
                    self.all_agents[:10]
                )
                
                # Organisation 2: D√©partement recherche
                self.create_organization(
                    user_batches[1] if len(user_batches) > 1 else user_batches[0],
                    "Labo Recherche IA",
                    "network",
                    self.all_agents[10:20]
                )
            
            # Phase 4: Cr√©er des t√¢ches vari√©es
            safe_print("\nüìã Phase 4: Cr√©ation de t√¢ches complexes")
            
            task_types = ["analysis", "development", "research", "optimization", "documentation"]
            priorities = ["low", "medium", "high", "critical"]
            
            # Cr√©er 50 t√¢ches
            for i in range(min(50, len(self.all_agents))):
                agent = self.all_agents[i]
                owner_username = None
                
                # Trouver le propri√©taire
                for username, data in self.users.items():
                    if agent["id"] in data["agents"]:
                        owner_username = username
                        break
                
                if owner_username:
                    task_config = {
                        "title": f"T√¢che {i+1}: {random.choice(['Analyser', 'D√©velopper', 'Rechercher', 'Optimiser'])}",
                        "description": f"Description d√©taill√©e de la t√¢che {i+1} pour l'agent {agent['name']}",
                        "task_type": task_types[i % len(task_types)],
                        "priority": priorities[i % len(priorities)],
                        "assigned_to": agent["id"]
                    }
                    
                    self.create_task(self.users[owner_username]["token"], task_config)
            
            # Phase 5: Communications massives
            safe_print("\nüìã Phase 5: Communications inter-agents")
            
            # Cr√©er 100+ messages
            performatives = ["inform", "request", "propose", "accept", "reject", "query"]
            
            for i in range(min(100, len(self.all_agents) * 2)):
                if len(self.all_agents) >= 2:
                    sender = random.choice(self.all_agents)
                    receiver = random.choice([a for a in self.all_agents if a["id"] != sender["id"]])
                    
                    # Trouver le token du propri√©taire du sender
                    sender_token = None
                    for username, data in self.users.items():
                        if sender["id"] in data["agents"]:
                            sender_token = data["token"]
                            break
                    
                    if sender_token:
                        self.send_message(
                            sender_token,
                            sender["id"],
                            receiver["id"],
                            random.choice(performatives),
                            {"message": f"Message {i+1} de {sender['name']} √† {receiver['name']}"}
                        )
            
            # Phase 6: M√©moires et apprentissage
            safe_print("\nüìã Phase 6: Stockage de m√©moires")
            
            memory_types = ["semantic", "episodic", "working"]
            
            for i in range(min(150, len(self.all_agents) * 3)):
                agent = random.choice(self.all_agents)
                
                # Trouver le token
                agent_token = None
                for username, data in self.users.items():
                    if agent["id"] in data["agents"]:
                        agent_token = data["token"]
                        break
                
                if agent_token:
                    self.store_memory(
                        agent_token,
                        agent["id"],
                        f"Connaissance {i+1}: Pattern observ√© dans le syst√®me",
                        random.choice(memory_types)
                    )
            
            # Phase 7: Compl√©tion des t√¢ches
            safe_print("\nüìã Phase 7: Simulation de compl√©tion")
            time.sleep(3)
            
            # Compl√©ter toutes les t√¢ches
            for task_id in self.tasks:
                self.complete_task_db(task_id)
            
            # Attente finale
            time.sleep(5)
            
            # Arr√™ter le monitoring
            stats["active"] = False
            
            # R√©sum√© final
            self.print_final_summary()
            
        except Exception as e:
            safe_print(f"\n‚ùå Erreur: {e}")
            stats["active"] = False
            import traceback
            traceback.print_exc()
    
    def create_organization(self, username, name, org_type, agents):
        """Cr√©e une organisation"""
        # TODO: Impl√©menter si l'endpoint existe
        stats["organizations_created"] += 1
        safe_print(f"   ‚úÖ Organisation cr√©√©e: {name} ({org_type}) avec {len(agents)} agents")
    
    def create_task(self, token, task_data):
        """Cr√©e une t√¢che"""
        headers = {"Authorization": f"Bearer {token}"}
        
        response = requests.post(
            f"{self.base_url}/api/v1/v1/tasks",
            json=task_data,
            headers=headers
        )
        
        if response.status_code == 201:
            task = response.json()
            self.tasks[task["id"]] = task
            stats["tasks_created"] += 1
            return task
        return None
    
    def send_message(self, token, from_id, to_id, performative, content):
        """Envoie un message"""
        headers = {"Authorization": f"Bearer {token}"}
        
        response = requests.post(
            f"{self.base_url}/api/v1/agents/{from_id}/messages",
            json={
                "receiver_id": to_id,
                "performative": performative,
                "content": content
            },
            headers=headers
        )
        
        if response.status_code == 201:
            stats["messages_sent"] += 1
            return True
        return False
    
    def store_memory(self, token, agent_id, content, memory_type):
        """Stocke une m√©moire"""
        headers = {"Authorization": f"Bearer {token}"}
        
        response = requests.post(
            f"{self.base_url}/api/v1/agents/{agent_id}/memories",
            json={
                "content": content,
                "memory_type": memory_type,
                "importance": round(random.uniform(0.5, 1.0), 2)
            },
            headers=headers
        )
        
        if response.status_code == 201:
            stats["memories_stored"] += 1
            return True
        return False
    
    def complete_task_db(self, task_id):
        """Compl√®te une t√¢che via la DB"""
        result = {
            "response": f"T√¢che {task_id} compl√©t√©e avec succ√®s",
            "confidence": round(random.uniform(0.8, 0.98), 2),
            "processing_time": round(random.uniform(1.0, 5.0), 2),
            "tokens_used": random.randint(500, 3000)
        }
        
        result_json = json.dumps(result).replace("'", "''")
        sql = f"""
        UPDATE tasks 
        SET status = 'completed',
            result = '{result_json}'::jsonb,
            completed_at = NOW()
        WHERE id = '{task_id}';
        """
        
        cmd = ["docker", "exec", "mas-production-system-db-1", "psql", "-U", "user", "-d", "mas", "-c", sql]
        subprocess.run(cmd, capture_output=True, text=True)
        stats["tasks_completed"] += 1
    
    def monitor_progress(self):
        """Thread de monitoring"""
        while stats["active"]:
            with print_lock:
                print(f"\nüìä Progression (√† {datetime.now().strftime('%H:%M:%S')}):")
                print(f"   üë• Utilisateurs: {stats['users_created']}")
                print(f"   ü§ñ Agents: {stats['agents_created']}/{TARGET_AGENTS}")
                print(f"   üìã T√¢ches: {stats['tasks_created']} cr√©√©es, {stats['tasks_completed']} compl√©t√©es")
                print(f"   üí¨ Messages: {stats['messages_sent']}")
                print(f"   üß† M√©moires: {stats['memories_stored']}")
                print(f"   üè¢ Organisations: {stats['organizations_created']}")
            time.sleep(5)
    
    def print_final_summary(self):
        """Affiche le r√©sum√© final"""
        safe_print("\n" + "="*80)
        safe_print("üìä R√âSUM√â FINAL - D√âMONSTRATION 100 AGENTS")
        safe_print("="*80)
        
        safe_print(f"""
   üë• Utilisateurs cr√©√©s: {stats['users_created']}
   ü§ñ Agents cr√©√©s: {stats['agents_created']}/{TARGET_AGENTS} ({stats['agents_created']*100//TARGET_AGENTS}%)
   üìã T√¢ches: {stats['tasks_created']} cr√©√©es, {stats['tasks_completed']} compl√©t√©es
   üí¨ Messages √©chang√©s: {stats['messages_sent']}
   üß† M√©moires stock√©es: {stats['memories_stored']}
   üè¢ Organisations: {stats['organizations_created']}
   
   Types d'agents:
   - Cognitifs: ~{stats['agents_created']//3}
   - R√©flexifs: ~{stats['agents_created']//3}
   - Hybrides: ~{stats['agents_created']//3}
   
   üéØ Statut: {'‚úÖ OBJECTIF ATTEINT' if stats['agents_created'] >= TARGET_AGENTS else '‚ö†Ô∏è OBJECTIF PARTIEL'}
        """)
        
        # Quelques statistiques sur les agents
        if self.all_agents:
            safe_print("\nü§ñ √âchantillon d'agents cr√©√©s:")
            for agent in self.all_agents[:10]:
                safe_print(f"   - {agent['name']} ({agent['agent_type']}) - {agent['role']}")
            
            if len(self.all_agents) > 10:
                safe_print(f"   ... et {len(self.all_agents) - 10} autres agents")
        
        safe_print("\n‚ú® D√©monstration termin√©e!")

def main():
    """Point d'entr√©e principal"""
    print("üöÄ D√âMONSTRATION ULTIME MAS - 100 AGENTS")
    print("   Cette d√©monstration va cr√©er:")
    print(f"   - {TARGET_AGENTS} agents")
    print(f"   - ~{(TARGET_AGENTS + AGENTS_PER_USER - 1) // AGENTS_PER_USER} utilisateurs")
    print("   - 50 t√¢ches complexes")
    print("   - 100+ messages inter-agents")
    print("   - 150+ m√©moires")
    print("   - Organisations et coordination")
    print()
    
    # V√©rifier l'API
    try:
        response = requests.get(f"{API_URL}/docs")
        if response.status_code != 200:
            print("‚ùå L'API MAS n'est pas accessible")
            return
    except:
        print("‚ùå Impossible de se connecter √† l'API")
        return
    
    # Confirmation
    print("‚ö†Ô∏è  ATTENTION: Cette d√©monstration va cr√©er BEAUCOUP de donn√©es!")
    print("   Appuyez sur Entr√©e pour continuer ou Ctrl+C pour annuler...")
    input()
    
    # Lancer la d√©mo
    demo = MAS100AgentsDemo()
    demo.run_mega_demo()

if __name__ == "__main__":
    main()