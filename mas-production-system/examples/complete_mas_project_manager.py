#!/usr/bin/env python3
"""
Syst√®me MAS Complet : Gestionnaire de Projet Intelligent

Ce syst√®me d√©montre toutes les fonctionnalit√©s du MAS √† travers un cas d'usage concret :
Une √©quipe d'agents collabore pour g√©rer un projet de d√©veloppement logiciel depuis
la r√©ception de la demande client jusqu'√† la livraison finale.

Agents impliqu√©s :
1. ProjectManager (Hybrid) - Coordination g√©n√©rale et d√©cisions strat√©giques
2. TechLead (Cognitive) - Architecture technique et supervision du d√©veloppement
3. Developer1 & Developer2 (Cognitive) - Impl√©mentation du code
4. QAEngineer (Hybrid) - Tests et assurance qualit√©
5. DevOpsEngineer (Reflexive) - D√©ploiement et infrastructure
6. DocumentationWriter (Cognitive) - Documentation technique et utilisateur
7. ClientLiaison (Hybrid) - Communication avec le client

Workflow complet :
1. R√©ception de la demande client
2. Analyse et planification du projet
3. Distribution des t√¢ches
4. D√©veloppement it√©ratif avec coordination
5. Tests et validation
6. Documentation
7. D√©ploiement
8. Livraison au client
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from uuid import uuid4
import aiohttp
from enum import Enum

# Configuration
API_BASE_URL = "http://localhost:8000/api/v1"
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ProjectPhase(Enum):
    """Phases du projet"""
    ANALYSIS = "analysis"
    PLANNING = "planning"
    DEVELOPMENT = "development"
    TESTING = "testing"
    DOCUMENTATION = "documentation"
    DEPLOYMENT = "deployment"
    DELIVERY = "delivery"
    COMPLETED = "completed"

class ProjectManagementSystem:
    """Syst√®me de gestion de projet avec agents MAS"""
    
    def __init__(self):
        self.agents = {}
        self.users = {}
        self.project_data = {}
        self.current_phase = ProjectPhase.ANALYSIS
        self.communication_log = []
        self.deliverables = {}
        
    async def initialize_system(self):
        """Initialise le syst√®me complet avec tous les agents"""
        print("\n" + "="*80)
        print("üöÄ INITIALISATION DU SYST√àME DE GESTION DE PROJET MAS")
        print("="*80)
        
        async with aiohttp.ClientSession() as session:
            # Cr√©er les utilisateurs et agents
            await self._create_project_team(session)
            
            # Configurer les capacit√©s de chaque agent
            await self._configure_agent_capabilities(session)
            
            # √âtablir les canaux de communication
            await self._setup_communication_channels(session)
            
        print("\n‚úÖ Syst√®me initialis√© avec succ√®s!")
        print(f"   ‚Ä¢ {len(self.agents)} agents cr√©√©s")
        print(f"   ‚Ä¢ Tous les canaux de communication √©tablis")
        print(f"   ‚Ä¢ Pr√™t √† recevoir les demandes clients\n")
    
    async def _create_project_team(self, session: aiohttp.ClientSession):
        """Cr√©e l'√©quipe compl√®te du projet"""
        team_config = [
            {
                "username": "project_manager",
                "email": "pm@mas-project.com",
                "agent_name": "ProjectManager",
                "agent_type": "hybrid",
                "role": "Chef de projet - Coordination et strat√©gie",
                "capabilities": {
                    "skills": ["project_management", "planning", "coordination", "risk_assessment"],
                    "role": "Project Manager",
                    "decision_threshold": 0.7
                }
            },
            {
                "username": "tech_lead",
                "email": "tech@mas-project.com",
                "agent_name": "TechLead",
                "agent_type": "cognitive",
                "role": "Architecte technique principal",
                "capabilities": {
                    "skills": ["architecture", "system_design", "code_review", "technical_decisions"],
                    "role": "Technical Lead",
                    "expertise": ["python", "fastapi", "postgresql", "docker", "kubernetes"]
                }
            },
            {
                "username": "developer_1",
                "email": "dev1@mas-project.com",
                "agent_name": "BackendDeveloper",
                "agent_type": "cognitive",
                "role": "D√©veloppeur Backend Senior",
                "capabilities": {
                    "skills": ["backend_development", "api_design", "database_design", "testing"],
                    "role": "Backend Developer",
                    "expertise": ["python", "fastapi", "sqlalchemy", "postgresql"]
                }
            },
            {
                "username": "developer_2",
                "email": "dev2@mas-project.com",
                "agent_name": "FrontendDeveloper",
                "agent_type": "cognitive",
                "role": "D√©veloppeur Frontend Senior",
                "capabilities": {
                    "skills": ["frontend_development", "ui_design", "responsive_design", "testing"],
                    "role": "Frontend Developer",
                    "expertise": ["react", "typescript", "tailwindcss", "nextjs"]
                }
            },
            {
                "username": "qa_engineer",
                "email": "qa@mas-project.com",
                "agent_name": "QAEngineer",
                "agent_type": "hybrid",
                "role": "Ing√©nieur Assurance Qualit√©",
                "capabilities": {
                    "skills": ["testing", "test_automation", "quality_assurance", "bug_tracking"],
                    "role": "QA Engineer",
                    "tools": ["pytest", "selenium", "postman", "jira"]
                }
            },
            {
                "username": "devops_engineer",
                "email": "devops@mas-project.com",
                "agent_name": "DevOpsEngineer",
                "agent_type": "reflexive",
                "role": "Ing√©nieur DevOps - Infrastructure et d√©ploiement",
                "capabilities": {
                    "skills": ["deployment", "ci_cd", "infrastructure", "monitoring"],
                    "role": "DevOps Engineer",
                    "tools": ["docker", "kubernetes", "github_actions", "terraform"]
                }
            },
            {
                "username": "doc_writer",
                "email": "docs@mas-project.com",
                "agent_name": "DocumentationWriter",
                "agent_type": "cognitive",
                "role": "R√©dacteur technique",
                "capabilities": {
                    "skills": ["technical_writing", "documentation", "api_docs", "user_guides"],
                    "role": "Documentation Writer",
                    "formats": ["markdown", "openapi", "docusaurus", "readme"]
                }
            },
            {
                "username": "client_liaison",
                "email": "client@mas-project.com",
                "agent_name": "ClientLiaison",
                "agent_type": "hybrid",
                "role": "Responsable relation client",
                "capabilities": {
                    "skills": ["communication", "requirement_gathering", "client_management", "reporting"],
                    "role": "Client Liaison",
                    "communication_style": "professional_friendly"
                }
            }
        ]
        
        print("\nüìã Cr√©ation de l'√©quipe du projet...")
        print("-" * 60)
        
        for member in team_config:
            # Cr√©er l'utilisateur
            user_data = await self._create_user(
                session,
                member["username"],
                member["email"],
                "secure_password_123"
            )
            
            if user_data:
                # Cr√©er l'agent
                agent_data = await self._create_agent(
                    session,
                    user_data["token"],
                    member["agent_name"],
                    member["agent_type"],
                    member["capabilities"]
                )
                
                if agent_data:
                    self.agents[member["agent_name"]] = {
                        "id": agent_data["id"],
                        "type": member["agent_type"],
                        "role": member["role"],
                        "capabilities": member["capabilities"],
                        "token": user_data["token"],
                        "status": "ready"
                    }
                    
                    print(f"‚úÖ {member['agent_name']} ({member['agent_type']}) - {member['role']}")
    
    async def process_client_request(self, client_request: Dict[str, Any]):
        """Traite une demande client de bout en bout"""
        print("\n" + "="*80)
        print("üì® NOUVELLE DEMANDE CLIENT RE√áUE")
        print("="*80)
        
        self.project_data = {
            "id": f"project_{uuid4().hex[:8]}",
            "client_request": client_request,
            "created_at": datetime.utcnow().isoformat(),
            "phases": {},
            "status": "active"
        }
        
        # Afficher la demande
        print(f"\nüè¢ Client: {client_request['client_name']}")
        print(f"üìã Projet: {client_request['project_name']}")
        print(f"üìù Description: {client_request['description']}")
        print(f"üìÖ Deadline: {client_request['deadline']}")
        print(f"üí∞ Budget: ${client_request['budget']:,}")
        
        async with aiohttp.ClientSession() as session:
            # Phase 1: Analyse de la demande
            await self._phase_analysis(session, client_request)
            
            # Phase 2: Planification du projet
            await self._phase_planning(session)
            
            # Phase 3: D√©veloppement
            await self._phase_development(session)
            
            # Phase 4: Tests et QA
            await self._phase_testing(session)
            
            # Phase 5: Documentation
            await self._phase_documentation(session)
            
            # Phase 6: D√©ploiement
            await self._phase_deployment(session)
            
            # Phase 7: Livraison au client
            await self._phase_delivery(session)
        
        print("\n" + "="*80)
        print("üéâ PROJET TERMIN√â AVEC SUCC√àS!")
        print("="*80)
        self._display_final_summary()
    
    async def _phase_analysis(self, session: aiohttp.ClientSession, client_request: Dict[str, Any]):
        """Phase 1: Analyse de la demande client"""
        print("\n\nüîç PHASE 1: ANALYSE DE LA DEMANDE")
        print("-" * 60)
        
        self.current_phase = ProjectPhase.ANALYSIS
        
        # Le ClientLiaison analyse la demande et clarifie les besoins
        analysis_task = {
            "title": "Analyser et clarifier la demande client",
            "description": f"Analyser la demande du client {client_request['client_name']} pour le projet {client_request['project_name']}",
            "context": client_request,
            "expected_output": "requirements_analysis"
        }
        
        # Envoyer la t√¢che au ClientLiaison
        print("üì§ ClientLiaison: Analyse des besoins client...")
        requirements = await self._assign_task_to_agent(
            session,
            "ClientLiaison",
            analysis_task
        )
        
        # Le TechLead fait une analyse technique
        tech_analysis_task = {
            "title": "Analyse technique de faisabilit√©",
            "description": "√âvaluer la faisabilit√© technique et identifier les technologies n√©cessaires",
            "context": {
                "client_request": client_request,
                "requirements": requirements
            },
            "expected_output": "technical_feasibility"
        }
        
        print("üì§ TechLead: Analyse de faisabilit√© technique...")
        feasibility = await self._assign_task_to_agent(
            session,
            "TechLead",
            tech_analysis_task
        )
        
        # Communication entre agents pour affiner l'analyse
        await self._inter_agent_communication(
            session,
            "ClientLiaison",
            "TechLead",
            {
                "type": "clarification",
                "content": "Besoin de pr√©cisions sur les contraintes techniques",
                "questions": ["Quelle charge attendue?", "Besoins de scalabilit√©?", "Int√©grations tierces?"]
            }
        )
        
        self.project_data["phases"]["analysis"] = {
            "requirements": requirements,
            "feasibility": feasibility,
            "completed_at": datetime.utcnow().isoformat()
        }
        
        print("\n‚úÖ Phase d'analyse compl√©t√©e")
    
    async def _phase_planning(self, session: aiohttp.ClientSession):
        """Phase 2: Planification du projet"""
        print("\n\nüìÖ PHASE 2: PLANIFICATION DU PROJET")
        print("-" * 60)
        
        self.current_phase = ProjectPhase.PLANNING
        
        # Le ProjectManager cr√©e le plan de projet
        planning_task = {
            "title": "Cr√©er le plan de projet d√©taill√©",
            "description": "Planifier les sprints, jalons et allocation des ressources",
            "context": {
                "analysis": self.project_data["phases"]["analysis"],
                "deadline": self.project_data["client_request"]["deadline"],
                "team_size": len(self.agents)
            },
            "expected_output": "project_plan"
        }
        
        print("üì§ ProjectManager: Cr√©ation du plan de projet...")
        project_plan = await self._assign_task_to_agent(
            session,
            "ProjectManager",
            planning_task
        )
        
        # Distribution des responsabilit√©s
        print("\nüìä Distribution des t√¢ches par le ProjectManager:")
        
        # Simuler la distribution des t√¢ches
        task_distribution = {
            "sprint_1": {
                "duration": "2 semaines",
                "tasks": [
                    {"agent": "TechLead", "task": "Concevoir l'architecture syst√®me"},
                    {"agent": "BackendDeveloper", "task": "Impl√©menter l'API REST"},
                    {"agent": "FrontendDeveloper", "task": "Cr√©er l'interface utilisateur"},
                    {"agent": "DevOpsEngineer", "task": "Configurer l'environnement de d√©veloppement"}
                ]
            },
            "sprint_2": {
                "duration": "2 semaines",
                "tasks": [
                    {"agent": "BackendDeveloper", "task": "Impl√©menter la logique m√©tier"},
                    {"agent": "FrontendDeveloper", "task": "Int√©grer avec l'API"},
                    {"agent": "QAEngineer", "task": "Cr√©er les tests automatis√©s"},
                    {"agent": "DocumentationWriter", "task": "Commencer la documentation"}
                ]
            }
        }
        
        for sprint, details in task_distribution.items():
            print(f"\n   {sprint.upper()} ({details['duration']}):")
            for task in details['tasks']:
                print(f"   ‚Ä¢ {task['agent']}: {task['task']}")
        
        self.project_data["phases"]["planning"] = {
            "project_plan": project_plan,
            "task_distribution": task_distribution,
            "completed_at": datetime.utcnow().isoformat()
        }
        
        print("\n‚úÖ Phase de planification compl√©t√©e")
    
    async def _phase_development(self, session: aiohttp.ClientSession):
        """Phase 3: D√©veloppement du projet"""
        print("\n\nüíª PHASE 3: D√âVELOPPEMENT")
        print("-" * 60)
        
        self.current_phase = ProjectPhase.DEVELOPMENT
        
        # Sprint 1: Architecture et fondations
        print("\nüèÉ SPRINT 1: Architecture et Fondations")
        print("-" * 40)
        
        # TechLead con√ßoit l'architecture
        architecture_task = {
            "title": "Concevoir l'architecture syst√®me",
            "description": "Cr√©er les diagrammes et d√©finir la structure du projet",
            "expected_output": "architecture_design"
        }
        
        print("üì§ TechLead: Conception de l'architecture...")
        architecture = await self._assign_task_to_agent(
            session,
            "TechLead",
            architecture_task
        )
        
        # Coordination entre TechLead et d√©veloppeurs
        await self._broadcast_to_team(
            session,
            "TechLead",
            ["BackendDeveloper", "FrontendDeveloper"],
            {
                "type": "architecture_briefing",
                "content": "Pr√©sentation de l'architecture syst√®me",
                "architecture": architecture
            }
        )
        
        # D√©veloppement en parall√®le
        print("\nüîß D√©veloppement en parall√®le:")
        
        # Backend development
        backend_task = {
            "title": "Impl√©menter l'API REST",
            "description": "Cr√©er les endpoints et la logique de base",
            "architecture": architecture,
            "expected_output": "api_implementation"
        }
        
        # Frontend development
        frontend_task = {
            "title": "Cr√©er l'interface utilisateur",
            "description": "D√©velopper les composants UI principaux",
            "architecture": architecture,
            "expected_output": "ui_implementation"
        }
        
        # DevOps setup
        devops_task = {
            "title": "Configurer l'infrastructure",
            "description": "Mettre en place Docker, CI/CD et environnements",
            "expected_output": "infrastructure_config"
        }
        
        # Ex√©cution parall√®le des t√¢ches
        results = await asyncio.gather(
            self._assign_task_to_agent(session, "BackendDeveloper", backend_task),
            self._assign_task_to_agent(session, "FrontendDeveloper", frontend_task),
            self._assign_task_to_agent(session, "DevOpsEngineer", devops_task)
        )
        
        print("   ‚úÖ API Backend impl√©ment√©e")
        print("   ‚úÖ Interface Frontend cr√©√©e")
        print("   ‚úÖ Infrastructure configur√©e")
        
        # Int√©gration et synchronisation
        print("\nüîÑ Synchronisation de l'√©quipe...")
        await self._team_sync_meeting(session, "Sprint 1 Review")
        
        # Sprint 2: Fonctionnalit√©s avanc√©es
        print("\n\nüèÉ SPRINT 2: Fonctionnalit√©s Avanc√©es")
        print("-" * 40)
        
        # T√¢ches du sprint 2
        advanced_features = await self._develop_advanced_features(session)
        
        self.project_data["phases"]["development"] = {
            "architecture": architecture,
            "sprint_1_results": results,
            "sprint_2_results": advanced_features,
            "completed_at": datetime.utcnow().isoformat()
        }
        
        print("\n‚úÖ Phase de d√©veloppement compl√©t√©e")
    
    async def _phase_testing(self, session: aiohttp.ClientSession):
        """Phase 4: Tests et Assurance Qualit√©"""
        print("\n\nüß™ PHASE 4: TESTS ET ASSURANCE QUALIT√â")
        print("-" * 60)
        
        self.current_phase = ProjectPhase.TESTING
        
        # QAEngineer coordonne les tests
        test_plan_task = {
            "title": "Cr√©er et ex√©cuter le plan de test",
            "description": "Tests unitaires, int√©gration, et end-to-end",
            "context": {
                "development_results": self.project_data["phases"]["development"]
            },
            "expected_output": "test_results"
        }
        
        print("üì§ QAEngineer: Ex√©cution des tests...")
        test_results = await self._assign_task_to_agent(
            session,
            "QAEngineer",
            test_plan_task
        )
        
        # Simulation de r√©sultats de tests
        print("\nüìä R√©sultats des tests:")
        print("   ‚Ä¢ Tests unitaires: 156/156 ‚úÖ (100%)")
        print("   ‚Ä¢ Tests d'int√©gration: 45/48 ‚ö†Ô∏è (93.75%)")
        print("   ‚Ä¢ Tests E2E: 22/25 ‚ö†Ô∏è (88%)")
        print("   ‚Ä¢ Coverage: 87%")
        
        # Communication des bugs aux d√©veloppeurs
        bugs_found = [
            {"severity": "high", "component": "backend", "description": "API timeout sur charge √©lev√©e"},
            {"severity": "medium", "component": "frontend", "description": "Probl√®me de responsive sur mobile"},
            {"severity": "low", "component": "backend", "description": "Log verbeux en production"}
        ]
        
        print("\nüêõ Bugs identifi√©s:")
        for bug in bugs_found:
            print(f"   ‚Ä¢ [{bug['severity'].upper()}] {bug['component']}: {bug['description']}")
        
        # Correction des bugs
        print("\nüîß Correction des bugs en cours...")
        
        # Assignation des bugs aux d√©veloppeurs
        for bug in bugs_found:
            if bug["component"] == "backend":
                await self._inter_agent_communication(
                    session,
                    "QAEngineer",
                    "BackendDeveloper",
                    {
                        "type": "bug_report",
                        "bug": bug,
                        "priority": bug["severity"]
                    }
                )
            else:
                await self._inter_agent_communication(
                    session,
                    "QAEngineer",
                    "FrontendDeveloper",
                    {
                        "type": "bug_report",
                        "bug": bug,
                        "priority": bug["severity"]
                    }
                )
        
        # Attendre les corrections
        await asyncio.sleep(2)  # Simulation
        
        print("\n‚úÖ Tous les bugs critiques corrig√©s")
        print("üìä Tests de r√©gression: 100% pass√©s")
        
        self.project_data["phases"]["testing"] = {
            "test_results": test_results,
            "bugs_found": bugs_found,
            "final_status": "all_tests_passing",
            "completed_at": datetime.utcnow().isoformat()
        }
        
        print("\n‚úÖ Phase de tests compl√©t√©e")
    
    async def _phase_documentation(self, session: aiohttp.ClientSession):
        """Phase 5: Documentation du projet"""
        print("\n\nüìö PHASE 5: DOCUMENTATION")
        print("-" * 60)
        
        self.current_phase = ProjectPhase.DOCUMENTATION
        
        # DocumentationWriter cr√©e la documentation compl√®te
        doc_task = {
            "title": "Cr√©er la documentation compl√®te du projet",
            "description": "Documentation technique, API, et guide utilisateur",
            "context": {
                "architecture": self.project_data["phases"]["development"]["architecture"],
                "api_specs": "OpenAPI 3.0 specifications",
                "user_flows": "Main user journeys"
            },
            "expected_output": "complete_documentation"
        }
        
        print("üì§ DocumentationWriter: Cr√©ation de la documentation...")
        documentation = await self._assign_task_to_agent(
            session,
            "DocumentationWriter",
            doc_task
        )
        
        # Types de documentation cr√©√©s
        doc_types = [
            "README.md - Guide de d√©marrage rapide",
            "API_REFERENCE.md - Documentation compl√®te de l'API",
            "ARCHITECTURE.md - D√©cisions d'architecture",
            "USER_GUIDE.md - Guide utilisateur d√©taill√©",
            "DEPLOYMENT.md - Guide de d√©ploiement",
            "CONTRIBUTING.md - Guide de contribution"
        ]
        
        print("\nüìÑ Documents cr√©√©s:")
        for doc in doc_types:
            print(f"   ‚Ä¢ {doc}")
        
        # Revue collaborative de la documentation
        print("\nüëÄ Revue collaborative de la documentation...")
        
        # TechLead r√©vise la documentation technique
        await self._inter_agent_communication(
            session,
            "DocumentationWriter",
            "TechLead",
            {
                "type": "review_request",
                "content": "Revue de la documentation technique",
                "documents": ["ARCHITECTURE.md", "API_REFERENCE.md"]
            }
        )
        
        print("   ‚úÖ Documentation technique valid√©e par TechLead")
        print("   ‚úÖ Guide utilisateur valid√© par ClientLiaison")
        
        self.project_data["phases"]["documentation"] = {
            "documents": doc_types,
            "status": "completed_and_reviewed",
            "completed_at": datetime.utcnow().isoformat()
        }
        
        print("\n‚úÖ Phase de documentation compl√©t√©e")
    
    async def _phase_deployment(self, session: aiohttp.ClientSession):
        """Phase 6: D√©ploiement en production"""
        print("\n\nüöÄ PHASE 6: D√âPLOIEMENT")
        print("-" * 60)
        
        self.current_phase = ProjectPhase.DEPLOYMENT
        
        # DevOpsEngineer g√®re le d√©ploiement
        deployment_task = {
            "title": "D√©ployer l'application en production",
            "description": "D√©ploiement complet avec monitoring et backups",
            "context": {
                "infrastructure": "Kubernetes cluster",
                "environment": "Production AWS",
                "strategy": "Blue-Green deployment"
            },
            "expected_output": "deployment_status"
        }
        
        print("üì§ DevOpsEngineer: D√©ploiement en production...")
        
        # √âtapes de d√©ploiement
        deployment_steps = [
            "üîç V√©rification des pr√©requis",
            "üì¶ Build des images Docker",
            "üîê Configuration des secrets",
            "‚ò∏Ô∏è D√©ploiement sur Kubernetes",
            "üîÑ Migration de base de donn√©es",
            "üåê Configuration du load balancer",
            "üìä Activation du monitoring",
            "‚úÖ Tests de sant√©"
        ]
        
        for step in deployment_steps:
            print(f"   {step}")
            await asyncio.sleep(0.5)  # Simulation
        
        deployment_result = await self._assign_task_to_agent(
            session,
            "DevOpsEngineer",
            deployment_task
        )
        
        # V√©rification post-d√©ploiement
        print("\nüîç V√©rification post-d√©ploiement:")
        print("   ‚Ä¢ Application: ‚úÖ Running")
        print("   ‚Ä¢ Database: ‚úÖ Connected")
        print("   ‚Ä¢ API Health: ‚úÖ Healthy")
        print("   ‚Ä¢ SSL Certificate: ‚úÖ Valid")
        print("   ‚Ä¢ Monitoring: ‚úÖ Active")
        
        # URLs de production
        print("\nüåê URLs de production:")
        print("   ‚Ä¢ Application: https://app.project-mas.com")
        print("   ‚Ä¢ API: https://api.project-mas.com")
        print("   ‚Ä¢ Documentation: https://docs.project-mas.com")
        print("   ‚Ä¢ Monitoring: https://monitoring.project-mas.com")
        
        self.project_data["phases"]["deployment"] = {
            "status": "successfully_deployed",
            "urls": {
                "app": "https://app.project-mas.com",
                "api": "https://api.project-mas.com",
                "docs": "https://docs.project-mas.com"
            },
            "completed_at": datetime.utcnow().isoformat()
        }
        
        print("\n‚úÖ Phase de d√©ploiement compl√©t√©e")
    
    async def _phase_delivery(self, session: aiohttp.ClientSession):
        """Phase 7: Livraison au client"""
        print("\n\nüéÅ PHASE 7: LIVRAISON AU CLIENT")
        print("-" * 60)
        
        self.current_phase = ProjectPhase.DELIVERY
        
        # ClientLiaison pr√©pare la livraison
        delivery_task = {
            "title": "Pr√©parer la livraison finale au client",
            "description": "Package complet avec documentation et acc√®s",
            "context": {
                "project_data": self.project_data,
                "client": self.project_data["client_request"]["client_name"]
            },
            "expected_output": "delivery_package"
        }
        
        print("üì§ ClientLiaison: Pr√©paration du package de livraison...")
        delivery_package = await self._assign_task_to_agent(
            session,
            "ClientLiaison",
            delivery_task
        )
        
        # Contenu de la livraison
        print("\nüì¶ Package de livraison:")
        print("   ‚Ä¢ Code source complet (GitHub)")
        print("   ‚Ä¢ Documentation compl√®te")
        print("   ‚Ä¢ Acc√®s aux environnements")
        print("   ‚Ä¢ Guide de d√©marrage rapide")
        print("   ‚Ä¢ Contrat de maintenance")
        print("   ‚Ä¢ Rapport de projet d√©taill√©")
        
        # Communication finale avec le client
        print("\nüí¨ Communication avec le client:")
        print(f"   De: ClientLiaison")
        print(f"   √Ä: {self.project_data['client_request']['client_name']}")
        print(f"   Objet: Livraison du projet {self.project_data['client_request']['project_name']}")
        print("\n   Message:")
        print("   Nous sommes heureux de vous annoncer que votre projet")
        print("   a √©t√© compl√©t√© avec succ√®s. Tous les objectifs ont √©t√©")
        print("   atteints et l'application est maintenant en production.")
        
        # M√©triques finales
        print("\nüìä M√©triques du projet:")
        print(f"   ‚Ä¢ Dur√©e totale: 6 semaines")
        print(f"   ‚Ä¢ Budget utilis√©: 92% du budget allou√©")
        print(f"   ‚Ä¢ Qualit√©: 98% (bas√© sur les tests et revues)")
        print(f"   ‚Ä¢ Satisfaction √©quipe: 95%")
        
        self.project_data["phases"]["delivery"] = {
            "package": delivery_package,
            "delivered_to": self.project_data["client_request"]["client_name"],
            "status": "delivered",
            "completed_at": datetime.utcnow().isoformat()
        }
        
        self.current_phase = ProjectPhase.COMPLETED
        print("\n‚úÖ Projet livr√© avec succ√®s!")
    
    # M√©thodes utilitaires
    async def _create_user(self, session: aiohttp.ClientSession, 
                          username: str, email: str, password: str) -> Optional[Dict]:
        """Cr√©e un utilisateur et retourne le token"""
        try:
            # Enregistrement
            register_data = {
                "username": username,
                "email": email,
                "password": password
            }
            
            async with session.post(
                f"{API_BASE_URL.replace('/api/v1', '')}/auth/register",
                json=register_data
            ) as resp:
                if resp.status not in [200, 201]:
                    logger.error(f"Failed to register {username}: {resp.status}")
                    return None
            
            # Connexion
            login_data = {
                "username": username,
                "password": password
            }
            
            async with session.post(
                f"{API_BASE_URL.replace('/api/v1', '')}/auth/login",
                data=login_data
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return {
                        "token": data["access_token"],
                        "username": username
                    }
                    
        except Exception as e:
            logger.error(f"Error creating user {username}: {str(e)}")
        
        return None
    
    async def _create_agent(self, session: aiohttp.ClientSession,
                           token: str, name: str, agent_type: str,
                           capabilities: Dict) -> Optional[Dict]:
        """Cr√©e un agent avec les capacit√©s sp√©cifi√©es"""
        try:
            headers = {"Authorization": f"Bearer {token}"}
            
            agent_data = {
                "name": name,
                "type": agent_type,
                "description": capabilities.get("role", "Agent MAS"),
                "capabilities": capabilities,
                "model": "gpt-4"
            }
            
            async with session.post(
                f"{API_BASE_URL}/agents",
                json=agent_data,
                headers=headers
            ) as resp:
                if resp.status == 200:
                    agent = await resp.json()
                    
                    # D√©marrer l'agent
                    async with session.post(
                        f"{API_BASE_URL}/agents/{agent['id']}/start",
                        headers=headers
                    ) as start_resp:
                        if start_resp.status == 200:
                            return agent
                            
        except Exception as e:
            logger.error(f"Error creating agent {name}: {str(e)}")
        
        return None
    
    async def _assign_task_to_agent(self, session: aiohttp.ClientSession,
                                   agent_name: str, task: Dict) -> Dict:
        """Assigne une t√¢che √† un agent et attend le r√©sultat"""
        agent_info = self.agents.get(agent_name)
        if not agent_info:
            return {"error": f"Agent {agent_name} not found"}
        
        headers = {"Authorization": f"Bearer {agent_info['token']}"}
        
        task_data = {
            "title": task["title"],
            "description": task["description"],
            "priority": "high",
            "metadata": task
        }
        
        try:
            # Cr√©er la t√¢che
            async with session.post(
                f"{API_BASE_URL}/agents/{agent_info['id']}/tasks",
                json=task_data,
                headers=headers
            ) as resp:
                if resp.status == 200:
                    # Simuler le traitement
                    await asyncio.sleep(2)
                    
                    # Retourner un r√©sultat simul√©
                    return {
                        "status": "completed",
                        "agent": agent_name,
                        "task": task["title"],
                        "result": f"{task.get('expected_output', 'task_result')}_completed",
                        "timestamp": datetime.utcnow().isoformat()
                    }
                    
        except Exception as e:
            logger.error(f"Error assigning task to {agent_name}: {str(e)}")
        
        return {"error": "Task assignment failed"}
    
    async def _inter_agent_communication(self, session: aiohttp.ClientSession,
                                       sender: str, recipient: str,
                                       message: Dict):
        """G√®re la communication entre agents"""
        sender_info = self.agents.get(sender)
        recipient_info = self.agents.get(recipient)
        
        if not sender_info or not recipient_info:
            return
        
        headers = {"Authorization": f"Bearer {sender_info['token']}"}
        
        message_data = {
            "recipient": recipient_info["id"],
            "performative": message.get("type", "inform"),
            "content": message
        }
        
        try:
            async with session.post(
                f"{API_BASE_URL}/agents/{sender_info['id']}/messages",
                json=message_data,
                headers=headers
            ) as resp:
                if resp.status == 200:
                    self.communication_log.append({
                        "from": sender,
                        "to": recipient,
                        "message": message,
                        "timestamp": datetime.utcnow().isoformat()
                    })
                    
        except Exception as e:
            logger.error(f"Error in agent communication: {str(e)}")
    
    async def _broadcast_to_team(self, session: aiohttp.ClientSession,
                               sender: str, recipients: List[str],
                               message: Dict):
        """Diffuse un message √† plusieurs agents"""
        tasks = []
        for recipient in recipients:
            task = self._inter_agent_communication(session, sender, recipient, message)
            tasks.append(task)
        
        await asyncio.gather(*tasks)
    
    async def _team_sync_meeting(self, session: aiohttp.ClientSession, meeting_topic: str):
        """Simule une r√©union de synchronisation d'√©quipe"""
        print(f"\nü§ù R√©union d'√©quipe: {meeting_topic}")
        
        # Le ProjectManager anime la r√©union
        all_agents = list(self.agents.keys())
        if "ProjectManager" in all_agents:
            all_agents.remove("ProjectManager")
        
        await self._broadcast_to_team(
            session,
            "ProjectManager",
            all_agents,
            {
                "type": "meeting",
                "topic": meeting_topic,
                "agenda": ["Progress update", "Blockers", "Next steps"]
            }
        )
        
        print("   ‚Ä¢ Tous les agents synchronis√©s")
        print("   ‚Ä¢ Blockers identifi√©s et r√©solus")
        print("   ‚Ä¢ Prochaines √©tapes clarifi√©es")
    
    async def _develop_advanced_features(self, session: aiohttp.ClientSession) -> Dict:
        """D√©veloppe les fonctionnalit√©s avanc√©es du sprint 2"""
        features = {
            "authentication": "Syst√®me d'authentification JWT",
            "real_time": "WebSocket pour les mises √† jour temps r√©el",
            "analytics": "Dashboard analytique",
            "notifications": "Syst√®me de notifications push"
        }
        
        print("\nüöÄ D√©veloppement des fonctionnalit√©s avanc√©es:")
        for feature, description in features.items():
            print(f"   ‚Ä¢ {description}")
            await asyncio.sleep(0.5)  # Simulation
        
        return {
            "features": features,
            "status": "completed",
            "quality": "production_ready"
        }
    
    async def _configure_agent_capabilities(self, session: aiohttp.ClientSession):
        """Configure les capacit√©s d√©taill√©es de chaque agent"""
        # Configuration avanc√©e des agents (r√®gles, seuils, etc.)
        pass
    
    async def _setup_communication_channels(self, session: aiohttp.ClientSession):
        """√âtablit les canaux de communication entre agents"""
        # Configuration des canaux de communication privil√©gi√©s
        pass
    
    def _display_final_summary(self):
        """Affiche le r√©sum√© final du projet"""
        print("\nüìä R√âSUM√â FINAL DU PROJET")
        print("="*60)
        print(f"üÜî ID Projet: {self.project_data['id']}")
        print(f"üìã Nom: {self.project_data['client_request']['project_name']}")
        print(f"üè¢ Client: {self.project_data['client_request']['client_name']}")
        print(f"‚è±Ô∏è Dur√©e: 6 semaines")
        print(f"üë• √âquipe: {len(self.agents)} agents")
        print(f"üì® Communications: {len(self.communication_log)} messages √©chang√©s")
        
        print("\n‚úÖ Livrables:")
        print("   ‚Ä¢ Application web compl√®te")
        print("   ‚Ä¢ API REST document√©e")
        print("   ‚Ä¢ Tests automatis√©s (87% coverage)")
        print("   ‚Ä¢ Documentation compl√®te")
        print("   ‚Ä¢ Infrastructure DevOps")
        print("   ‚Ä¢ Monitoring et alerting")
        
        print("\nüéØ Objectifs atteints:")
        print("   ‚Ä¢ ‚úÖ Respect du d√©lai")
        print("   ‚Ä¢ ‚úÖ Dans le budget")
        print("   ‚Ä¢ ‚úÖ Qualit√© production")
        print("   ‚Ä¢ ‚úÖ Client satisfait")


async def main():
    """Fonction principale pour d√©montrer le syst√®me complet"""
    
    # Cr√©er le syst√®me
    pms = ProjectManagementSystem()
    
    # Initialiser avec tous les agents
    await pms.initialize_system()
    
    # Simuler une demande client
    client_request = {
        "client_name": "TechCorp Industries",
        "project_name": "Plateforme de Gestion des Ressources Humaines",
        "description": """
        Nous avons besoin d'une plateforme moderne de gestion RH incluant:
        - Gestion des employ√©s et des d√©partements
        - Syst√®me de cong√©s et absences
        - √âvaluations de performance
        - Tableau de bord analytique
        - Int√©gration avec notre syst√®me de paie existant
        - Application mobile pour les employ√©s
        """,
        "requirements": [
            "Interface web responsive",
            "API REST pour int√©grations",
            "Authentification SSO",
            "Support multi-tenant",
            "Conformit√© RGPD",
            "Haute disponibilit√© (99.9%)"
        ],
        "deadline": (datetime.utcnow() + timedelta(days=42)).isoformat(),
        "budget": 150000,
        "contact": "john.doe@techcorp.com"
    }
    
    # Traiter la demande de bout en bout
    await pms.process_client_request(client_request)
    
    print("\nüéâ D√©monstration compl√®te du syst√®me MAS termin√©e!")
    print("Ce syst√®me a d√©montr√©:")
    print("‚Ä¢ Collaboration entre 8 agents sp√©cialis√©s")
    print("‚Ä¢ Gestion compl√®te d'un projet de d√©veloppement")
    print("‚Ä¢ Communication inter-agents sophistiqu√©e")
    print("‚Ä¢ Adaptation aux diff√©rentes phases du projet")
    print("‚Ä¢ Livraison r√©ussie au client")


if __name__ == "__main__":
    asyncio.run(main())