#!/usr/bin/env python3
"""
Test simple pour v√©rifier que autonomous_swarm.py fonctionne
"""

import asyncio
import sys
sys.path.append('/app')

from autonomous_swarm import AutonomousSwarmWithLogging

async def test_simple():
    """Test simple du swarm"""
    print("\nüß™ TEST SIMPLE DU SWARM AUTONOME")
    print("="*50)
    
    # Cr√©er un petit swarm
    print("\n1Ô∏è‚É£ Cr√©ation du swarm avec 3 agents...")
    swarm = AutonomousSwarmWithLogging(num_agents=3)
    await swarm.initialize(3)
    
    print("\n‚úÖ Agents cr√©√©s:")
    for agent in swarm.agents:
        print(f"   - {agent.name} ({type(agent).__name__})")
    
    # Tester la d√©composition de t√¢che
    print("\n2Ô∏è‚É£ Test de d√©composition de t√¢che...")
    task = "Cr√©er un syst√®me de recommandation"
    task_graph = swarm.decompose_task(task)
    print(f"‚úÖ T√¢che d√©compos√©e en {len(task_graph.nodes())} sous-t√¢ches")
    
    # Tester l'ex√©cution d'une sous-t√¢che
    print("\n3Ô∏è‚É£ Test d'ex√©cution d'une sous-t√¢che...")
    if swarm.agents:
        agent = swarm.agents[0]
        result = await swarm.execute_workflow(
            agent,
            "test_subtask", 
            {"phase": "test", "node_id": 0}
        )
        print(f"‚úÖ R√©sultat: {result['status']} en {result['duration']:.2f}s")
    
    # Nettoyer
    print("\n4Ô∏è‚É£ Nettoyage...")
    await swarm.cleanup()
    
    print("\n‚úÖ TEST TERMIN√â AVEC SUCC√àS!")

if __name__ == "__main__":
    asyncio.run(test_simple())