#!/usr/bin/env python3
"""
Diagnose Agent Processing
Diagnostic pour comprendre pourquoi les agents ne traitent pas les t√¢ches
"""

import asyncio
import json
from datetime import datetime
from uuid import UUID
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select

from services.core.src.database.models import Task, Agent, Message
from services.core.src.core.agents import get_agent_runtime


async def diagnose_agent_processing():
    """Diagnostic complet du traitement des t√¢ches par les agents"""
    DATABASE_URL = "postgresql+asyncpg://postgres:postgres@localhost:5432/mas_production"
    
    engine = create_async_engine(DATABASE_URL, echo=False)
    SessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    runtime = get_agent_runtime()
    
    print("üîç Diagnostic du traitement des t√¢ches par les agents")
    print("=" * 60)
    
    async with SessionLocal() as session:
        # 1. V√©rifier tous les agents actifs
        print("\n1Ô∏è‚É£ Agents actifs dans la base de donn√©es:")
        stmt = select(Agent).where(Agent.is_active == True)
        result = await session.execute(stmt)
        agents = result.scalars().all()
        
        for agent in agents:
            print(f"\nüë§ {agent.name} ({agent.role})")
            print(f"   ID: {agent.id}")
            print(f"   Type: {agent.agent_type}")
            print(f"   Status: {agent.status}")
            print(f"   Derni√®re activit√©: {agent.last_active_at}")
            
            # V√©rifier dans le runtime
            is_running = await runtime.is_agent_running(agent.id)
            print(f"   En cours d'ex√©cution: {'‚úÖ' if is_running else '‚ùå'}")
            
            # Compter les t√¢ches
            task_stmt = select(Task).where(Task.assigned_to == agent.id)
            task_result = await session.execute(task_stmt)
            all_tasks = task_result.scalars().all()
            
            pending_tasks = [t for t in all_tasks if t.status == "pending"]
            completed_tasks = [t for t in all_tasks if t.status == "completed"]
            
            print(f"   T√¢ches: {len(all_tasks)} total")
            print(f"     - En attente: {len(pending_tasks)}")
            print(f"     - Compl√©t√©es: {len(completed_tasks)}")
            print(f"     - Avec r√©sultat: {len([t for t in completed_tasks if t.result is not None])}")
        
        # 2. V√©rifier les agents dans le runtime
        print(f"\n2Ô∏è‚É£ Agents dans le runtime:")
        running_agents = runtime.list_running_agents()
        print(f"   Nombre d'agents en cours: {len(running_agents)}")
        
        for agent_id in running_agents:
            runtime_agent = runtime.get_running_agent(agent_id)
            if runtime_agent:
                print(f"\n   üèÉ Agent en cours: {runtime_agent.name}")
                metrics = await runtime_agent.get_metrics()
                print(f"      Actions: {metrics['actions_executed']}")
                print(f"      Messages: {metrics['messages_processed']}")
                print(f"      T√¢ches: {metrics['tasks_completed']}")
                print(f"      Erreurs: {metrics['errors']}")
                print(f"      File de t√¢ches: {runtime_agent._tasks.qsize()} en attente")
                print(f"      File de messages: {runtime_agent._message_queue.qsize()} en attente")
                print(f"      En cours d'ex√©cution: {'‚úÖ' if runtime_agent._running else '‚ùå'}")
        
        # 3. Analyser les probl√®mes potentiels
        print("\n3Ô∏è‚É£ Analyse des probl√®mes potentiels:")
        
        # Agents avec status working mais pas dans le runtime
        working_not_running = []
        for agent in agents:
            if agent.status == "working" and not await runtime.is_agent_running(agent.id):
                working_not_running.append(agent)
        
        if working_not_running:
            print("\n‚ùå Agents marqu√©s 'working' mais non actifs:")
            for agent in working_not_running:
                print(f"   - {agent.name} (ID: {agent.id})")
        
        # T√¢ches anciennes en pending
        print("\n‚è∞ T√¢ches en attente depuis longtemps:")
        old_pending_stmt = select(Task).where(
            Task.status == "pending",
            Task.created_at < datetime.utcnow().replace(hour=datetime.utcnow().hour - 1)
        )
        old_pending_result = await session.execute(old_pending_stmt)
        old_tasks = old_pending_result.scalars().all()
        
        for task in old_tasks[:5]:  # Limiter √† 5
            age = datetime.utcnow() - task.created_at
            print(f"   - {task.title} (√¢ge: {age.total_seconds() / 3600:.1f}h)")
            if task.assigned_to:
                agent_stmt = select(Agent).where(Agent.id == task.assigned_to)
                agent_result = await session.execute(agent_stmt)
                agent = agent_result.scalar_one_or_none()
                if agent:
                    print(f"     Assign√©e √†: {agent.name} (status: {agent.status})")
        
        # 4. V√©rifier la configuration
        print("\n4Ô∏è‚É£ Points de v√©rification:")
        
        # Le runtime a-t-il √©t√© initialis√© correctement ?
        print(f"   ‚úì Runtime initialis√©: {'‚úÖ' if runtime else '‚ùå'}")
        
        # Y a-t-il des erreurs dans les logs r√©cents ?
        recent_messages_stmt = select(Message).where(
            Message.performative == "failure"
        ).order_by(Message.created_at.desc()).limit(5)
        recent_messages_result = await session.execute(recent_messages_stmt)
        error_messages = recent_messages_result.scalars().all()
        
        if error_messages:
            print(f"\n   ‚ö†Ô∏è  Messages d'erreur r√©cents:")
            for msg in error_messages:
                print(f"      - {msg.created_at}: {msg.content.get('error', 'Unknown error')}")
        
        # 5. Recommandations
        print("\n5Ô∏è‚É£ Recommandations:")
        
        if not running_agents:
            print("   üî∏ Aucun agent n'est actuellement en cours d'ex√©cution")
            print("      ‚Üí Utilisez le script 'start_agent.py' pour d√©marrer les agents")
        
        if working_not_running:
            print("   üî∏ Des agents ont un status incorrect")
            print("      ‚Üí R√©initialisez leur status ou red√©marrez-les")
        
        if old_tasks:
            print("   üî∏ Des t√¢ches sont bloqu√©es depuis longtemps")
            print("      ‚Üí Utilisez 'force_task_completion.py' pour les d√©bloquer")
        
        print("\nüìå Probl√®me principal identifi√©:")
        if not running_agents:
            print("   Les agents ne sont pas d√©marr√©s dans le runtime.")
            print("   Le syst√®me a des agents cr√©√©s mais ils ne sont pas actifs.")
            print("\n   Solution: D√©marrer les agents avec le runtime appropri√©")
            print("   ou utiliser 'force_task_completion.py' pour traiter manuellement.")
        else:
            print("   Les agents sont actifs mais peuvent avoir des probl√®mes de traitement.")
            print("   V√©rifiez les logs et les configurations des agents.")


if __name__ == "__main__":
    asyncio.run(diagnose_agent_processing())