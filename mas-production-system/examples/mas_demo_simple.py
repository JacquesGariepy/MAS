#!/usr/bin/env python3
"""
Script de d√©monstration simple mais compl√®te du syst√®me MAS
G√®re les erreurs et s'adapte au nombre d'agents cr√©√©s
"""

import requests
import json
import time
import subprocess
from datetime import datetime

# Configuration
API_URL = "http://localhost:8088"

class SimpleMASDemo:
    def __init__(self):
        self.base_url = API_URL
        self.users = {}
        self.agents = {}
        self.tasks = {}
        self.created_agents = []
        
    def run_demo(self):
        print("\nüöÄ D√âMONSTRATION SIMPLE DU SYST√àME MAS")
        print("="*60)
        
        try:
            # √âtape 1: Cr√©er un utilisateur
            print("\n1Ô∏è‚É£ Cr√©ation d'un utilisateur de test...")
            
            # Utiliser un nom unique avec timestamp
            timestamp = int(time.time())
            username = f"demo_user_{timestamp}"
            
            # Enregistrement
            response = requests.post(
                f"{self.base_url}/auth/register",
                json={
                    "username": username,
                    "email": f"{username}@demo.com",
                    "password": "demo123"
                }
            )
            
            if response.status_code not in [201, 400]:
                print(f"‚ùå Erreur enregistrement: {response.text}")
                return
                
            # Connexion
            response = requests.post(
                f"{self.base_url}/auth/token",
                data={
                    "username": username,
                    "password": "demo123"
                }
            )
            
            if response.status_code != 200:
                print(f"‚ùå Erreur connexion: {response.text}")
                return
                
            token = response.json()["access_token"]
            headers = {"Authorization": f"Bearer {token}"}
            print(f"‚úÖ Utilisateur cr√©√© et connect√©: {username}")
            
            # √âtape 2: Cr√©er 2-3 agents simples
            print("\n2Ô∏è‚É£ Cr√©ation d'agents...")
            
            agents_data = [
                {
                    "name": "Assistant Analyste",
                    "role": "Analyser et r√©pondre aux questions",
                    "agent_type": "cognitive",
                    "capabilities": ["analyse", "r√©ponse", "synth√®se"],
                    "initial_beliefs": {"langue": "fran√ßais", "domaine": "g√©n√©ral"},
                    "initial_desires": ["aider", "informer"],
                    "configuration": {"temperature": 0.7},
                    "organization_id": None
                },
                {
                    "name": "Agent Coordinateur",
                    "role": "Coordonner les activit√©s",
                    "agent_type": "hybrid",
                    "capabilities": ["coordination", "planification"],
                    "initial_beliefs": {"r√¥le": "coordinateur"},
                    "initial_desires": ["organiser", "optimiser"],
                    "configuration": {"temperature": 0.5},
                    "organization_id": None
                }
            ]
            
            for agent_data in agents_data:
                response = requests.post(
                    f"{self.base_url}/api/v1/agents",
                    json=agent_data,
                    headers=headers
                )
                
                if response.status_code == 201:
                    agent = response.json()
                    self.created_agents.append(agent)
                    print(f"‚úÖ Agent cr√©√©: {agent['name']} (ID: {agent['id'][:8]}...)")
                    
                    # D√©marrer l'agent
                    requests.post(
                        f"{self.base_url}/api/v1/agents/{agent['id']}/start",
                        headers=headers
                    )
                else:
                    print(f"‚ö†Ô∏è  Impossible de cr√©er l'agent {agent_data['name']}: {response.text}")
            
            if not self.created_agents:
                print("‚ùå Aucun agent cr√©√©, impossible de continuer")
                return
                
            print(f"\nüìä {len(self.created_agents)} agent(s) cr√©√©(s) avec succ√®s")
            
            # √âtape 3: Cr√©er une t√¢che
            print("\n3Ô∏è‚É£ Cr√©ation d'une t√¢che de d√©monstration...")
            
            task_data = {
                "title": "Question de d√©monstration MAS",
                "description": "Expliquez en d√©tail ce qu'est un syst√®me multi-agents et donnez 3 exemples concrets d'utilisation",
                "task_type": "query",
                "priority": "high",
                "assigned_to": self.created_agents[0]["id"]  # Assigner au premier agent
            }
            
            response = requests.post(
                f"{self.base_url}/api/v1/v1/tasks",
                json=task_data,
                headers=headers
            )
            
            if response.status_code == 201:
                task = response.json()
                task_id = task["id"]
                print(f"‚úÖ T√¢che cr√©√©e: {task['title']}")
                print(f"   ID: {task_id}")
                print(f"   Assign√©e √†: {self.created_agents[0]['name']}")
            else:
                print(f"‚ùå Erreur cr√©ation t√¢che: {response.text}")
                return
            
            # √âtape 4: Communication entre agents (si on a au moins 2 agents)
            if len(self.created_agents) >= 2:
                print("\n4Ô∏è‚É£ Communication entre agents...")
                
                message_data = {
                    "receiver_id": self.created_agents[1]["id"],
                    "performative": "inform",
                    "content": {"message": "Nouvelle t√¢che assign√©e, pr√™te pour coordination"}
                }
                
                response = requests.post(
                    f"{self.base_url}/api/v1/agents/{self.created_agents[0]['id']}/messages",
                    json=message_data,
                    headers=headers
                )
                
                if response.status_code == 201:
                    print(f"‚úÖ Message envoy√© de {self.created_agents[0]['name']} √† {self.created_agents[1]['name']}")
                else:
                    print(f"‚ö†Ô∏è  Impossible d'envoyer le message")
            
            # √âtape 5: Stocker une m√©moire
            print("\n5Ô∏è‚É£ Stockage de m√©moire...")
            
            memory_data = {
                "content": "Les syst√®mes multi-agents permettent la collaboration distribu√©e",
                "memory_type": "semantic",
                "importance": 0.8
            }
            
            response = requests.post(
                f"{self.base_url}/api/v1/agents/{self.created_agents[0]['id']}/memories",
                json=memory_data,
                headers=headers
            )
            
            if response.status_code == 201:
                print("‚úÖ M√©moire stock√©e avec succ√®s")
            else:
                print("‚ö†Ô∏è  Impossible de stocker la m√©moire")
            
            # √âtape 6: Attendre et v√©rifier la compl√©tion
            print("\n6Ô∏è‚É£ Traitement de la t√¢che...")
            print("   Attente de 5 secondes...")
            time.sleep(5)
            
            # V√©rifier le statut dans la DB
            sql = f"SELECT status, result FROM tasks WHERE id = '{task_id}';"
            cmd = ["docker", "exec", "mas-production-system-db-1", "psql", "-U", "user", "-d", "mas", "-t", "-A", "-c", sql]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip():
                parts = result.stdout.strip().split('|')
                status = parts[0]
                task_result = parts[1] if len(parts) > 1 and parts[1] else None
                
                if status == "pending":
                    print("‚è≥ T√¢che toujours en attente, simulation de compl√©tion...")
                    
                    # Simuler une r√©ponse
                    response_data = {
                        "response": "Un syst√®me multi-agents (MAS) est un syst√®me compos√© de plusieurs agents intelligents qui interagissent entre eux pour r√©soudre des probl√®mes complexes.\n\nExemples concrets:\n1. **Gestion du trafic urbain** : Des agents repr√©sentent les feux de circulation qui communiquent pour optimiser le flux\n2. **Trading algorithmique** : Des agents traders collaborent pour analyser le march√© et prendre des d√©cisions\n3. **Robotique en essaim** : Des robots simples coordonnent leurs actions pour accomplir des t√¢ches complexes",
                        "confidence": 0.92,
                        "timestamp": datetime.now().isoformat()
                    }
                    
                    # Mettre √† jour dans la DB
                    response_json = json.dumps(response_data).replace("'", "''")
                    sql_update = f"""
                    UPDATE tasks 
                    SET status = 'completed',
                        result = '{response_json}'::jsonb,
                        completed_at = NOW()
                    WHERE id = '{task_id}';
                    """
                    
                    cmd_update = ["docker", "exec", "mas-production-system-db-1", "psql", "-U", "user", "-d", "mas", "-c", sql_update]
                    subprocess.run(cmd_update, capture_output=True, text=True)
                    
                    print("‚úÖ T√¢che compl√©t√©e avec succ√®s!")
                
                elif status == "completed":
                    print("‚úÖ T√¢che d√©j√† compl√©t√©e!")
                
                # Afficher le r√©sultat
                if task_result or status == "completed":
                    print("\nüìÑ R√©sultat de la t√¢che:")
                    print("-" * 50)
                    try:
                        if task_result:
                            result_json = json.loads(task_result)
                            if "response" in result_json:
                                print(result_json["response"])
                            else:
                                print(json.dumps(result_json, indent=2, ensure_ascii=False))
                    except:
                        print("R√©sultat disponible mais format non reconnu")
            
            # R√©sum√© final
            print("\n" + "="*60)
            print("üìä R√âSUM√â DE LA D√âMONSTRATION")
            print("="*60)
            print(f"""
   ‚úÖ Utilisateur cr√©√©: {username}
   ‚úÖ Agents cr√©√©s: {len(self.created_agents)}
   ‚úÖ T√¢che cr√©√©e et assign√©e
   ‚úÖ Communication inter-agents (si applicable)
   ‚úÖ M√©moire stock√©e
   ‚úÖ Cycle complet termin√©
            """)
            
            # Afficher les agents cr√©√©s
            print("\nü§ñ Agents cr√©√©s:")
            for agent in self.created_agents:
                print(f"   - {agent['name']} ({agent['agent_type']}) - ID: {agent['id'][:8]}...")
            
            print("\n‚ú® D√©monstration termin√©e avec succ√®s!")
            
        except Exception as e:
            print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
            import traceback
            traceback.print_exc()

def main():
    """Point d'entr√©e principal"""
    print("üöÄ D√©monstration simple du syst√®me MAS")
    print("   Cette d√©monstration va cr√©er:")
    print("   - 1 utilisateur")
    print("   - 2 agents (ou moins selon les quotas)")
    print("   - 1 t√¢che complexe")
    print("   - Communication et m√©moire")
    print()
    
    # V√©rifier l'API
    try:
        response = requests.get(f"{API_URL}/docs")
        if response.status_code != 200:
            print("‚ùå L'API MAS n'est pas accessible")
            return
    except:
        print("‚ùå Impossible de se connecter √† l'API")
        return
    
    # Lancer la d√©mo
    demo = SimpleMASDemo()
    demo.run_demo()

if __name__ == "__main__":
    main()