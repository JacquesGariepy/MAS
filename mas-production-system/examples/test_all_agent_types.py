#!/usr/bin/env python3
"""
Test complet du syst√®me MAS v2.0 avec tous les types d'agents activ√©s
Teste la cr√©ation de tous les types d'agents et l'envoi de messages entre eux
"""

import asyncio
import httpx
import json
from typing import Dict, List, Optional
from uuid import UUID, uuid4
from datetime import datetime

# Configuration
# Si on est dans Docker, utiliser le nom du service
import os
if os.path.exists('/.dockerenv'):
    # Nous sommes dans un conteneur Docker
    API_BASE_URL = "http://core:8000/api/v1"
else:
    # Ex√©cution locale
    API_BASE_URL = "http://localhost:8088/api/v1"  # Port 8088 pour docker-compose.dev.yml


class MASTestAllAgents:
    def __init__(self):
        self.client = httpx.AsyncClient(timeout=30.0)
        self.users = {}
        self.tokens = {}
        
    async def __aenter__(self):
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        await self.client.aclose()
    
    async def register_user(self, username: str, email: str, password: str) -> Dict:
        """Enregistrer un nouvel utilisateur"""
        # Note: auth est √† la racine, pas sous /api/v1
        auth_url = API_BASE_URL.replace('/api/v1', '')
        response = await self.client.post(
            f"{auth_url}/auth/register",
            json={
                "username": username,
                "email": email,
                "password": password
            }
        )
        
        if response.status_code != 201:
            print(f"‚ùå Erreur lors de l'enregistrement de {username}: {response.status_code}")
            print(f"   D√©tails: {response.text}")
            return None
            
        return response.json()
    
    async def login_user(self, username: str, password: str) -> str:
        """Se connecter et obtenir un token"""
        # Note: auth est √† la racine, pas sous /api/v1
        auth_url = API_BASE_URL.replace('/api/v1', '')
        response = await self.client.post(
            f"{auth_url}/auth/token",
            data={
                "username": username,
                "password": password,
                "grant_type": "password"
            }
        )
        
        if response.status_code != 200:
            print(f"‚ùå Erreur lors de la connexion de {username}: {response.status_code}")
            print(f"   D√©tails: {response.text}")
            return None
            
        data = response.json()
        return data["access_token"]
    
    async def create_agent(self, token: str, agent_data: Dict) -> Optional[Dict]:
        """Cr√©er un agent"""
        headers = {"Authorization": f"Bearer {token}"}
        
        response = await self.client.post(
            f"{API_BASE_URL}/agents",
            json=agent_data,
            headers=headers
        )
        
        if response.status_code != 201:
            print(f"‚ùå Erreur lors de la cr√©ation de l'agent {agent_data['name']}: {response.status_code}")
            print(f"   Type: {agent_data['agent_type']}")
            print(f"   D√©tails: {response.text}")
            return None
            
        return response.json()
    
    async def send_message(self, token: str, sender_id: str, receiver_id: str, 
                          performative: str, content: Dict) -> Optional[Dict]:
        """Envoyer un message entre agents"""
        headers = {"Authorization": f"Bearer {token}"}
        
        conversation_id = str(uuid4())
        message_data = {
            "receiver_id": receiver_id,
            "performative": performative,
            "content": content,
            "conversation_id": conversation_id
        }
        
        print(f"\nüì§ Envoi d'un message:")
        print(f"   De: {sender_id}")
        print(f"   √Ä: {receiver_id}")
        print(f"   Type: {performative}")
        print(f"   Contenu: {json.dumps(content, indent=2)}")
        print(f"   Conversation ID: {conversation_id}")
        
        response = await self.client.post(
            f"{API_BASE_URL}/agents/{sender_id}/messages",
            json=message_data,
            headers=headers
        )
        
        if response.status_code != 201:
            print(f"‚ùå Erreur lors de l'envoi du message: {response.status_code}")
            print(f"   D√©tails: {response.text}")
            return None
        
        result = response.json()
        print(f"‚úÖ Message envoy√© avec succ√®s! ID: {result.get('id', 'N/A')}")
        return result
    
    async def get_messages(self, token: str, agent_id: str, message_type: str = "received") -> List[Dict]:
        """R√©cup√©rer les messages d'un agent"""
        headers = {"Authorization": f"Bearer {token}"}
        
        response = await self.client.get(
            f"{API_BASE_URL}/agents/{agent_id}/messages",
            params={"message_type": message_type},
            headers=headers
        )
        
        if response.status_code != 200:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des messages: {response.status_code}")
            return []
            
        data = response.json()
        return data.get("items", [])
    
    async def create_memory(self, token: str, agent_id: str, content: str, 
                           memory_type: str = "semantic") -> Optional[Dict]:
        """Cr√©er une m√©moire pour un agent"""
        headers = {"Authorization": f"Bearer {token}"}
        
        memory_data = {
            "content": content,
            "memory_type": memory_type,
            "importance": 0.8,
            "metadata": {
                "source": "test_script",
                "timestamp": datetime.utcnow().isoformat()
            }
        }
        
        response = await self.client.post(
            f"{API_BASE_URL}/agents/{agent_id}/memories",
            json=memory_data,
            headers=headers
        )
        
        if response.status_code not in [200, 201]:
            print(f"‚ùå Erreur lors de la cr√©ation de la m√©moire: {response.status_code}")
            print(f"   D√©tails: {response.text}")
            return None
            
        return response.json()
    
    async def run_complete_test(self):
        """Ex√©cuter le test complet avec tous les types d'agents"""
        print("\n" + "="*80)
        print("üöÄ TEST COMPLET DU SYST√àME MAS v2.0 - TOUS LES TYPES D'AGENTS")
        print("="*80)
        
        # 1. Cr√©er les utilisateurs
        print("\nüìù √âtape 1: Cr√©ation des utilisateurs")
        print("-" * 40)
        
        # Generate unique usernames to avoid conflicts
        import time
        unique_id = str(int(time.time()))[-6:]
        users_data = [
            {"username": f"alice_{unique_id}", "email": f"alice_{unique_id}@test.com", "password": "alice12345"},
            {"username": f"bob_{unique_id}", "email": f"bob_{unique_id}@test.com", "password": "bob12345"},
            {"username": f"charlie_{unique_id}", "email": f"charlie_{unique_id}@test.com", "password": "charlie12345"}
        ]
        
        # Variables pour stocker les propri√©taires des agents
        cognitive_owner = None
        reflexive_owner = None
        hybrid_owner = None
        
        for user_data in users_data:
            user = await self.register_user(**user_data)
            if user:
                self.users[user_data["username"]] = user
                token = await self.login_user(user_data["username"], user_data["password"])
                if token:
                    self.tokens[user_data["username"]] = token
                    print(f"‚úÖ {user_data['username']} cr√©√© et connect√©")
                else:
                    print(f"‚ùå √âchec de connexion pour {user_data['username']}")
            else:
                print(f"‚ùå √âchec de cr√©ation pour {user_data['username']}")
        
        # 2. Cr√©er des agents de chaque type
        print("\nü§ñ √âtape 2: Cr√©ation des agents (tous les types)")
        print("-" * 40)
        
        agents_by_user = {}
        agent_configs = [
            # Agents cognitifs (reactive)
            {
                "name": "CognitiveAnalyst",
                "role": "Analyste de donn√©es",
                "agent_type": "reactive",
                "capabilities": ["analysis", "reasoning", "planning"],
                "configuration": {
                    "model": "gpt-4",
                    "temperature": 0.7,
                    "max_tokens": 2000
                }
            },
            {
                "name": "CognitiveStrategist",
                "role": "Strat√®ge",
                "agent_type": "reactive",
                "capabilities": ["strategy", "planning", "decision_making"],
                "configuration": {
                    "model": "gpt-4",
                    "temperature": 0.8
                }
            },
            # Agents r√©flexifs
            {
                "name": "ReflexiveMonitor",
                "role": "Moniteur syst√®me",
                "agent_type": "reflexive",
                "capabilities": ["monitoring", "alerting", "fast_response"],
                "reactive_rules": {
                    "alert_rule": {
                        "condition": {"alert_level": "high"},
                        "action": {"type": "notify", "content": "Alert triggered!"}
                    }
                }
            },
            {
                "name": "ReflexiveResponder",
                "role": "R√©pondeur rapide",
                "agent_type": "reflexive",
                "capabilities": ["quick_response", "rule_execution"],
                "reactive_rules": {
                    "greeting_rule": {
                        "condition": {"type": "greeting"},
                        "action": {"type": "respond", "content": "Hello!"}
                    }
                }
            },
            # Agents hybrides
            {
                "name": "HybridCoordinator",
                "role": "Coordinateur adaptatif",
                "agent_type": "hybrid",
                "capabilities": ["coordination", "adaptation", "multi_mode"],
                "configuration": {
                    "complexity_threshold": 0.6,
                    "learning_rate": 0.1
                },
                "reactive_rules": {
                    "simple_task": {
                        "condition": {"complexity": "low"},
                        "action": {"type": "execute", "content": "Quick execution"}
                    }
                }
            },
            {
                "name": "HybridOptimizer",
                "role": "Optimiseur de performance",
                "agent_type": "hybrid",
                "capabilities": ["optimization", "learning", "dual_mode"],
                "configuration": {
                    "complexity_threshold": 0.7,
                    "adaptive": True
                }
            }
        ]
        
        # Distribuer les agents entre les utilisateurs
        for i, (username, token) in enumerate(self.tokens.items()):
            agents_by_user[username] = []
            
            # Chaque utilisateur cr√©e 2 agents
            for j in range(2):
                agent_config = agent_configs[(i * 2 + j) % len(agent_configs)]
                agent = await self.create_agent(token, agent_config)
                
                if agent:
                    agents_by_user[username].append(agent)
                    print(f"‚úÖ {username}: Agent '{agent['name']}' cr√©√© (Type: {agent['agent_type']})")
                else:
                    print(f"‚ùå {username}: √âchec cr√©ation agent '{agent_config['name']}'")
        
        # Compter les agents par type
        agent_count_by_type = {"reactive": 0, "cognitive": 0, "reflexive": 0, "hybrid": 0}
        total_agents = 0
        for agents in agents_by_user.values():
            for agent in agents:
                agent_type = agent["agent_type"]
                # Map cognitive back to reactive for display consistency
                if agent_type == "cognitive":
                    agent_count_by_type["reactive"] += 1
                    agent_count_by_type["cognitive"] += 1
                else:
                    agent_count_by_type[agent_type] += 1
                total_agents += 1
        
        print(f"\nüìä R√©sum√© des agents cr√©√©s:")
        print(f"   - Total: {total_agents}")
        print(f"   - Cognitifs (reactive): {agent_count_by_type['reactive']}")
        print(f"   - R√©flexifs: {agent_count_by_type['reflexive']}")
        print(f"   - Hybrides: {agent_count_by_type['hybrid']}")
        
        # 3. Tester l'envoi de messages entre diff√©rents types d'agents
        print("\nüí¨ √âtape 3: Test de communication inter-agents")
        print("-" * 40)
        
        messages_sent = 0
        
        # Test 1: Cognitive -> Reflexive
        print("\nüîÑ Test 1: Communication Cognitive -> Reflexive")
        cognitive_sender = None
        cognitive_owner = None
        reflexive_receiver = None
        reflexive_owner = None
        
        # Trouver un agent cognitif et un agent r√©flexif
        for username, agents in agents_by_user.items():
            for agent in agents:
                if agent["agent_type"] == "reactive" and not cognitive_sender:
                    cognitive_sender = agent
                    cognitive_owner = username
                    print(f"   ‚úì Agent cognitif trouv√©: {agent['name']} (propri√©taire: {username})")
                elif agent["agent_type"] == "reflexive" and not reflexive_receiver:
                    reflexive_receiver = agent
                    reflexive_owner = username
                    print(f"   ‚úì Agent r√©flexif trouv√©: {agent['name']} (propri√©taire: {username})")
                    
        if cognitive_sender and reflexive_receiver and cognitive_owner:
            print(f"\nüéØ Envoi de {cognitive_sender['name']} vers {reflexive_receiver['name']}")
            msg = await self.send_message(
                self.tokens[cognitive_owner],
                cognitive_sender["id"],
                reflexive_receiver["id"],
                "request",
                {
                    "action": "monitor_status", 
                    "target": "system_health",
                    "parameters": {
                        "metrics": ["cpu", "memory", "disk"],
                        "interval": "5m"
                    }
                }
            )
            if msg:
                messages_sent += 1
                print("   ‚úÖ Message envoy√© avec succ√®s")
            else:
                print("   ‚ùå √âchec de l'envoi du message")
        else:
            print("   ‚ö†Ô∏è Agents non trouv√©s pour ce test")
            if not cognitive_sender:
                print("      - Aucun agent cognitif disponible")
            if not reflexive_receiver:
                print("      - Aucun agent r√©flexif disponible")
        
        # Test 2: Reflexive -> Hybrid
        print("\nüîÑ Test 2: Communication Reflexive -> Hybrid")
        reflexive_sender = None
        reflexive_owner = None
        hybrid_receiver = None
        hybrid_owner = None
        
        for username, agents in agents_by_user.items():
            for agent in agents:
                if agent["agent_type"] == "reflexive" and not reflexive_sender:
                    reflexive_sender = agent
                    reflexive_owner = username
                    print(f"   ‚úì Agent r√©flexif trouv√©: {agent['name']} (propri√©taire: {username})")
                elif agent["agent_type"] == "hybrid" and not hybrid_receiver:
                    hybrid_receiver = agent
                    hybrid_owner = username
                    print(f"   ‚úì Agent hybride trouv√©: {agent['name']} (propri√©taire: {username})")
                    
        if reflexive_sender and hybrid_receiver and reflexive_owner:
            print(f"\nüéØ Envoi de {reflexive_sender['name']} vers {hybrid_receiver['name']}")
            msg = await self.send_message(
                self.tokens[reflexive_owner],
                reflexive_sender["id"],
                hybrid_receiver["id"],
                "inform",
                {
                    "status": "alert", 
                    "level": "medium", 
                    "details": "CPU usage 75%",
                    "timestamp": datetime.utcnow().isoformat(),
                    "recommendations": [
                        "Scale up instances",
                        "Optimize queries",
                        "Check memory leaks"
                    ]
                }
            )
            if msg:
                messages_sent += 1
                print("   ‚úÖ Message envoy√© avec succ√®s")
            else:
                print("   ‚ùå √âchec de l'envoi du message")
        else:
            print("   ‚ö†Ô∏è Agents non trouv√©s pour ce test")
            if not reflexive_sender:
                print("      - Aucun agent r√©flexif disponible")
            if not hybrid_receiver:
                print("      - Aucun agent hybride disponible")
        
        # Test 3: Hybrid -> Cognitive
        print("\nüîÑ Test 3: Communication Hybrid -> Cognitive")
        hybrid_sender = None
        hybrid_owner = None
        cognitive_receiver = None
        cognitive_owner = None
        
        for username, agents in agents_by_user.items():
            for agent in agents:
                if agent["agent_type"] == "hybrid" and not hybrid_sender:
                    hybrid_sender = agent
                    hybrid_owner = username
                    print(f"   ‚úì Agent hybride trouv√©: {agent['name']} (propri√©taire: {username})")
                elif agent["agent_type"] == "reactive" and not cognitive_receiver:
                    cognitive_receiver = agent
                    cognitive_owner = username
                    print(f"   ‚úì Agent cognitif trouv√©: {agent['name']} (propri√©taire: {username})")
                    
        if hybrid_sender and cognitive_receiver and hybrid_owner:
            print(f"\nüéØ Envoi de {hybrid_sender['name']} vers {cognitive_receiver['name']}")
            msg = await self.send_message(
                self.tokens[hybrid_owner],
                hybrid_sender["id"],
                cognitive_receiver["id"],
                "propose",
                {
                    "optimization": "resource_allocation", 
                    "current_usage": {
                        "cpu": "75%",
                        "memory": "60%",
                        "disk": "45%"
                    },
                    "proposed_changes": {
                        "add_instances": 2,
                        "upgrade_tier": "premium",
                        "enable_autoscaling": True
                    },
                    "expected_gain": "25%",
                    "cost_impact": "+$150/month"
                }
            )
            if msg:
                messages_sent += 1
                print("   ‚úÖ Message envoy√© avec succ√®s")
            else:
                print("   ‚ùå √âchec de l'envoi du message")
        else:
            print("   ‚ö†Ô∏è Agents non trouv√©s pour ce test")
            if not hybrid_sender:
                print("      - Aucun agent hybride disponible")
            if not cognitive_receiver:
                print("      - Aucun agent cognitif disponible")
        
        # Test 4: Communication bidirectionnelle
        print("\nüîÑ Test 4: Communication bidirectionnelle")
        
        # Utiliser les agents du Test 1 s'ils existent
        if cognitive_sender and reflexive_receiver and cognitive_owner and reflexive_owner:
            print(f"\nüéØ Test de r√©ponse: {reflexive_receiver['name']} r√©pond √† {cognitive_sender['name']}")
            
            # Le r√©flexif r√©pond au cognitif
            response_msg = await self.send_message(
                self.tokens[reflexive_owner],
                reflexive_receiver["id"],
                cognitive_sender["id"],
                "inform",
                {
                    "response_to": "monitor_status",
                    "status": "monitoring_active",
                    "metrics": {
                        "cpu": "45%",
                        "memory": "62%",
                        "disk": "78%",
                        "network": "normal"
                    },
                    "alerts": [],
                    "health_score": 85
                }
            )
            if response_msg:
                messages_sent += 1
                print("   ‚úÖ Message de r√©ponse envoy√© avec succ√®s")
            else:
                print("   ‚ùå √âchec de l'envoi du message de r√©ponse")
        else:
            print("   ‚ö†Ô∏è Test bidirectionnel impossible - agents manquants")
            if not cognitive_sender:
                print("      - Agent cognitif manquant")
            if not reflexive_receiver:
                print("      - Agent r√©flexif manquant")
            if not cognitive_owner:
                print("      - Propri√©taire de l'agent cognitif manquant")
            if not reflexive_owner:
                print("      - Propri√©taire de l'agent r√©flexif manquant")
        
        print(f"\nüì® Total messages envoy√©s: {messages_sent}")
        
        # R√©capitulatif des tests de communication
        print("\nüìã R√©capitulatif des tests de communication:")
        print("-" * 40)
        print(f"   - Tests ex√©cut√©s: 4")
        print(f"   - Messages envoy√©s avec succ√®s: {messages_sent}")
        print(f"   - Taux de r√©ussite: {(messages_sent / 4 * 100):.1f}%" if messages_sent > 0 else "   - Taux de r√©ussite: 0%")
        
        # Attendre un peu pour que les messages soient trait√©s
        print("\n‚è≥ Attente de 5 secondes pour le traitement complet des messages...")
        for i in range(5, 0, -1):
            print(f"   {i}...", end='', flush=True)
            await asyncio.sleep(1)
        print(" Termin√©!")
        
        # 4. Cr√©er des m√©moires pour chaque type d'agent
        print("\nüß† √âtape 4: Cr√©ation de m√©moires")
        print("-" * 40)
        
        memories_created = 0
        
        for username, agents in agents_by_user.items():
            token = self.tokens[username]
            for agent in agents:
                memory_content = f"Test memory for {agent['agent_type']} agent: {agent['name']}"
                memory = await self.create_memory(token, agent["id"], memory_content)
                if memory:
                    memories_created += 1
                    print(f"‚úÖ M√©moire cr√©√©e pour {agent['name']} ({agent['agent_type']})")
        
        print(f"\nüíæ Total m√©moires cr√©√©es: {memories_created}")
        
        # 5. V√©rifier la r√©ception des messages
        print("\nüì• √âtape 5: V√©rification de la r√©ception des messages")
        print("-" * 40)
        
        total_received = 0
        all_messages = []
        
        for username, agents in agents_by_user.items():
            token = self.tokens[username]
            for agent in agents:
                messages = await self.get_messages(token, agent["id"], "received")
                if messages:
                    total_received += len(messages)
                    print(f"\n‚úÖ {agent['name']} ({agent['agent_type']}) a re√ßu {len(messages)} message(s):")
                    
                    for i, msg in enumerate(messages, 1):
                        print(f"\n   üì® Message {i}:")
                        print(f"      - De: {msg.get('sender_id', 'N/A')}")
                        print(f"      - Type: {msg.get('performative', 'N/A')}")
                        print(f"      - Conversation: {msg.get('conversation_id', 'N/A')}")
                        print(f"      - Timestamp: {msg.get('created_at', 'N/A')}")
                        print(f"      - Contenu:")
                        content = msg.get('content', {})
                        print(f"        {json.dumps(content, indent=8)}")
                        
                        all_messages.append({
                            'receiver': agent['name'],
                            'receiver_type': agent['agent_type'],
                            'message': msg
                        })
                else:
                    print(f"\n‚ö™ {agent['name']} ({agent['agent_type']}) n'a re√ßu aucun message")
        
        print(f"\nüì¨ Total messages re√ßus: {total_received}")
        
        # Afficher aussi les messages envoy√©s par chaque agent
        print("\nüì§ V√©rification des messages envoy√©s")
        print("-" * 40)
        
        total_sent = 0
        
        for username, agents in agents_by_user.items():
            token = self.tokens[username]
            for agent in agents:
                sent_messages = await self.get_messages(token, agent["id"], "sent")
                if sent_messages:
                    total_sent += len(sent_messages)
                    print(f"\n‚úÖ {agent['name']} ({agent['agent_type']}) a envoy√© {len(sent_messages)} message(s)")
                    
                    for i, msg in enumerate(sent_messages, 1):
                        print(f"\n   üì§ Message envoy√© {i}:")
                        print(f"      - Vers: {msg.get('receiver_id', 'N/A')}")
                        print(f"      - Type: {msg.get('performative', 'N/A')}")
                        print(f"      - Contenu: {json.dumps(msg.get('content', {}), indent=8)}")
        
        print(f"\nüì® Total messages envoy√©s (v√©rification): {total_sent}")
        
        # Cr√©er un dictionnaire pour mapper les IDs des agents
        agents_by_id = {}
        for username, agents in agents_by_user.items():
            for agent in agents:
                agents_by_id[agent['id']] = {
                    'name': agent['name'],
                    'agent_type': agent['agent_type']
                }
        
        # Afficher un r√©sum√© des conversations
        print("\nüîÑ R√©sum√© des conversations")
        print("-" * 40)
        
        if all_messages:
            print("\nFlux de communication d√©tect√©:")
            conversations = {}
            
            for msg_info in all_messages:
                msg = msg_info['message']
                conv_id = msg.get('conversation_id', 'N/A')
                if conv_id not in conversations:
                    conversations[conv_id] = []
                conversations[conv_id].append(msg_info)
            
            for conv_id, msgs in conversations.items():
                print(f"\nüìç Conversation {conv_id[:8]}...")
                for msg_info in msgs:
                    msg = msg_info['message']
                    receiver = msg_info['receiver']
                    receiver_type = msg_info['receiver_type']
                    sender_id = msg.get('sender_id', 'N/A')
                    sender_name = 'Inconnu'
                    sender_type = 'N/A'
                    
                    if sender_id in agents_by_id:
                        sender_name = agents_by_id[sender_id]['name']
                        sender_type = agents_by_id[sender_id]['agent_type']
                    
                    print(f"   {sender_name} ({sender_type}) ‚Üí {receiver} ({receiver_type}): {msg.get('performative', 'N/A')}")
        
        # Diagramme de flux de communication
        print("\nüó∫Ô∏è  Diagramme de flux de communication")
        print("-" * 40)
        
        # Cr√©er une matrice de communication
        comm_matrix = {}
        for msg_info in all_messages:
            msg = msg_info['message']
            sender_id = msg.get('sender_id', 'N/A')
            receiver = msg_info['receiver']
            
            if sender_id in agents_by_id:
                sender = agents_by_id[sender_id]['name']
                sender_type = agents_by_id[sender_id]['agent_type']
                key = f"{sender} ({sender_type})"
                
                if key not in comm_matrix:
                    comm_matrix[key] = {}
                    
                receiver_key = f"{receiver} ({msg_info['receiver_type']})"
                if receiver_key not in comm_matrix[key]:
                    comm_matrix[key][receiver_key] = 0
                comm_matrix[key][receiver_key] += 1
        
        # Afficher la matrice
        if comm_matrix:
            print("\nMatrice de communication (nombre de messages):")
            print("")
            for sender, receivers in comm_matrix.items():
                print(f"\nüì§ {sender}:")
                for receiver, count in receivers.items():
                    print(f"   ‚Üí {receiver}: {count} message(s)")
        
        # R√©sum√© final
        print("\n" + "="*80)
        print("üìä R√âSUM√â DU TEST")
        print("="*80)
        print(f"‚úÖ Utilisateurs cr√©√©s: {len(self.users)}")
        print(f"‚úÖ Agents cr√©√©s: {total_agents}")
        print(f"   - Cognitifs: {agent_count_by_type['reactive']}")
        print(f"   - R√©flexifs: {agent_count_by_type['reflexive']}")
        print(f"   - Hybrides: {agent_count_by_type['hybrid']}")
        print(f"‚úÖ Messages envoy√©s: {messages_sent}")
        print(f"‚úÖ Messages re√ßus: {total_received}")
        print(f"‚úÖ M√©moires cr√©√©es: {memories_created}")
        
        if agent_count_by_type['reflexive'] > 0 and agent_count_by_type['hybrid'] > 0:
            print("\nüéâ SUCC√àS: Tous les types d'agents sont maintenant fonctionnels!")
        else:
            print("\n‚ö†Ô∏è  Certains types d'agents n'ont pas pu √™tre cr√©√©s")
        
        print("="*80)


async def main():
    """Fonction principale"""
    async with MASTestAllAgents() as tester:
        await tester.run_complete_test()


if __name__ == "__main__":
    asyncio.run(main())