#!/usr/bin/env python3
"""
Test simple de cr√©ation d'utilisateur
Pour identifier le probl√®me exact
"""

import requests
import json
import time

API_URL = "http://localhost:8088"

def test_user_creation():
    """Test complet de cr√©ation d'utilisateur"""
    print("üß™ TEST DE CR√âATION D'UTILISATEUR")
    print("="*50)
    
    # Donn√©es de test
    username = f"test_{int(time.time())}"
    email = f"{username}@test.com"
    password = "password123"
    
    print(f"\nüìù Donn√©es de test:")
    print(f"   Username: {username}")
    print(f"   Email: {email}")
    print(f"   Password: {password}")
    
    # 1. Test de l'endpoint d'enregistrement
    print("\n1Ô∏è‚É£ Test d'enregistrement (/auth/register)")
    print("   URL:", f"{API_URL}/auth/register")
    print("   M√©thode: POST")
    print("   Body:", json.dumps({"username": username, "email": email, "password": password}, indent=2))
    
    try:
        response = requests.post(
            f"{API_URL}/auth/register",
            json={"username": username, "email": email, "password": password},
            headers={"Content-Type": "application/json"}
        )
        
        print(f"\n   ‚û°Ô∏è R√©ponse:")
        print(f"   Status Code: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        print(f"   Body: {response.text}")
        
        # Analyser la r√©ponse
        if response.status_code == 201:
            print("   ‚úÖ Enregistrement r√©ussi!")
        elif response.status_code == 400:
            print("   ‚ö†Ô∏è Erreur 400 - Utilisateur peut-√™tre d√©j√† existant")
        elif response.status_code == 422:
            print("   ‚ùå Erreur 422 - Validation √©chou√©e")
            try:
                error_detail = response.json()
                print("   D√©tails:", json.dumps(error_detail, indent=2))
            except:
                pass
        else:
            print(f"   ‚ùå Code inattendu: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Exception: {type(e).__name__}: {e}")
        return
    
    # 2. Test de connexion
    print("\n2Ô∏è‚É£ Test de connexion (/auth/token)")
    print("   URL:", f"{API_URL}/auth/token")
    print("   M√©thode: POST")
    print("   Content-Type: application/x-www-form-urlencoded")
    
    try:
        # Note: /auth/token utilise form data, pas JSON
        response = requests.post(
            f"{API_URL}/auth/token",
            data={
                "username": username,
                "password": password
            }
        )
        
        print(f"\n   ‚û°Ô∏è R√©ponse:")
        print(f"   Status Code: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        print(f"   Body: {response.text[:500]}...")  # Limiter la sortie
        
        if response.status_code == 200:
            print("   ‚úÖ Connexion r√©ussie!")
            try:
                data = response.json()
                if "access_token" in data:
                    print(f"   Token: {data['access_token'][:50]}...")
                    return data["access_token"]
            except:
                pass
        elif response.status_code == 401:
            print("   ‚ùå Erreur 401 - Authentification √©chou√©e")
        else:
            print(f"   ‚ùå Code inattendu: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Exception: {type(e).__name__}: {e}")
    
    return None

def test_with_token(token):
    """Test avec le token obtenu"""
    print("\n3Ô∏è‚É£ Test avec token")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # Test de r√©cup√©ration d'agents
    try:
        response = requests.get(
            f"{API_URL}/api/v1/agents",
            headers=headers
        )
        
        print(f"   GET /api/v1/agents: {response.status_code}")
        if response.status_code == 200:
            agents = response.json()
            print(f"   Nombre d'agents: {len(agents)}")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

def test_alternate_endpoints():
    """Test d'endpoints alternatifs"""
    print("\n4Ô∏è‚É£ Test d'endpoints alternatifs")
    
    # Essayer diff√©rentes variantes
    endpoints = [
        "/api/v1/auth/register",
        "/api/auth/register",
        "/register",
        "/api/v1/users",
        "/users/register"
    ]
    
    for endpoint in endpoints:
        try:
            url = f"{API_URL}{endpoint}"
            response = requests.options(url)
            print(f"   OPTIONS {endpoint}: {response.status_code}")
        except:
            print(f"   OPTIONS {endpoint}: ‚ùå Erreur de connexion")

if __name__ == "__main__":
    # Test principal
    token = test_user_creation()
    
    if token:
        test_with_token(token)
    
    # Tests suppl√©mentaires
    test_alternate_endpoints()
    
    print("\n‚úÖ Tests termin√©s!")