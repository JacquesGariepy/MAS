name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Cache Node dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip
        pip install black flake8 mypy pylint bandit safety
        
    - name: Install Node dependencies
      run: |
        npm install -g eslint prettier typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin
        
    - name: Lint Python code
      run: |
        black --check services/
        flake8 services/ --max-line-length=120
        mypy services/ --ignore-missing-imports
        pylint services/ --fail-under=8.0
        
    - name: Security scan Python
      run: |
        bandit -r services/ -ll
        safety check --json
        
    - name: Lint TypeScript code
      run: |
        cd services/api
        npm install
        eslint . --ext .ts,.tsx
        prettier --check "**/*.{ts,tsx,json,md}"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r services/core/requirements.txt
        pip install -r services/core/requirements-test.txt
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/mas_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test
      run: |
        cd services/core
        pytest tests/unit -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/mas_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test
      run: |
        cd services/core
        pytest tests/integration -v
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./services/core/coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        service: [core, api, auth, gateway]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services/${{ matrix.service }}
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mas-${{ matrix.service }}:latest
          ${{ secrets.DOCKER_USERNAME }}/mas-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/mas-core:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk security scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: '${{ secrets.DOCKER_USERNAME }}/mas-core:${{ github.sha }}'
        args: --severity-threshold=high

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        ./scripts/wait-for-services.sh
        
    - name: Run E2E tests
      run: |
        cd tests/e2e
        npm install
        npm run test:ci
        
    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down