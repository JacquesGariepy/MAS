# version: '3.8'  # Obsolete, removed to avoid warning

# Docker Compose avec Ollama intégré
# Usage: docker-compose -f docker-compose.ollama.yml up

services:
  # Service Ollama
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama-data:/root/.ollama
    ports:
      - "11434:11434"
    # Pour GPU NVIDIA (décommenter si disponible)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Service MAS Core
  core:
    build:
      context: ./services/core
      dockerfile: Dockerfile.dev
    ports:
      - "8088:8000"  # Changed to 8088 to avoid conflicts
    environment:
      # Configuration Ollama
      - LLM_PROVIDER=ollama
      - LLM_BASE_URL=http://ollama:11434
      - LLM_MODEL=${OLLAMA_MODEL:-qwen3:4b}  # Modifiable via .env
      - LLM_API_KEY=not-needed
      
      # Reste de la configuration
      - ENVIRONMENT=development
      - DEBUG=true
      - SECRET_KEY=dev-secret-key
      - DATABASE_URL=postgresql://user:pass@db:5432/mas
      - REDIS_URL=redis://redis:6379/0
      
    volumes:
      - ./services/core/src:/app/src
      - ./services/core/alembic.ini:/app/alembic.ini
      - ./logs:/app/logs
    depends_on:
      ollama:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services...' &&
        sleep 5 &&
        echo 'Skipping migrations for now...' &&
        echo 'Starting application...' &&
        uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mas
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mas"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Redis
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6380:6379"  # Changed from 6379 to avoid conflict
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Service pour initialiser Ollama avec un modèle
  ollama-setup:
    image: ollama/ollama:latest
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ollama-data:/root/.ollama
    entrypoint: >
      sh -c "
        echo 'Waiting for Ollama to be ready...' &&
        sleep 10 &&
        echo 'Pulling ${OLLAMA_MODEL:-qwen3:4b} model...' &&
        ollama pull ${OLLAMA_MODEL:-qwen3:4b} &&
        echo 'Model ready!' &&
        exit 0
      "
    restart: "no"  # Run once only

volumes:
  postgres-data:
  redis-data:
  ollama-data: